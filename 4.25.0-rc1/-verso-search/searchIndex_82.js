window.docContents[82].resolve({"/Basic-Types/Characters/#Char":{"contents":"Characters are represented by the type Char, which may be any Unicode scalar value.\nWhile strings are UTF-8-encoded arrays of bytes, characters are represented by full 32-bit values.\nLean provides special syntax for character literals.\n\n\n\n\n\n\n\n\n\n","context":"Lean Reference\u0009Basic Types","header":"19.7. Characters","id":"/Basic-Types/Characters/#Char"},"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Conversions":{"contents":"Bit-for-bit conversion to UInt64. Interprets a Float as a UInt64, ignoring the numeric value\nand treating the Float's bit pattern as a UInt64.Floats and UInt64s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.This function is distinct from Float.toUInt64, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n\nBit-for-bit conversion to UInt32. Interprets a Float32 as a UInt32, ignoring the numeric value\nand treating the Float32's bit pattern as a UInt32.Float32s and UInt32s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.This function is distinct from Float.toUInt32, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.This function does not reduce in the kernel.\n\nBit-for-bit conversion from UInt64. Interprets a UInt64 as a Float, ignoring the numeric value\nand treating the UInt64's bit pattern as a Float.Floats and UInt64s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.This function does not reduce in the kernel.\n\nBit-for-bit conversion from UInt32. Interprets a UInt32 as a Float32, ignoring the numeric\nvalue and treating the UInt32's bit pattern as a Float32.Float32s and UInt32s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.This function does not reduce in the kernel.\n\nConverts a 64-bit floating-point number to a 32-bit floating-point number.\nThis may lose precision.This function does not reduce in the kernel.\n\nConverts a 32-bit floating-point number to a 64-bit floating-point number.This function does not reduce in the kernel.\n\nConverts a floating-point number to a string.This function does not reduce in the kernel.\n\nConverts a floating-point number to a string.This function does not reduce in the kernel.\n\nConverts a floating-point number to an 8-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt8. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt8 value (i.e. UInt8.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 8-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int8 (including Inf), returns the maximum value of\nInt8 (i.e. Int8.maxValue). If it is smaller than the minimum value for Int8 (including -Inf),\nreturns the minimum value of Int8 (i.e. Int8.minValue). If it is NaN, returns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to an 8-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt8. Returns 0 if the Float32 is negative or NaN, and returns the\nlargest UInt8 value (i.e. UInt8.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 8-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int8 (including Inf), returns the maximum value of\nInt8 (i.e. Int8.maxValue). If it is smaller than the minimum value for Int8 (including -Inf),\nreturns the minimum value of Int8 (i.e. Int8.minValue). If it is NaN, returns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 16-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt16. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt16 value (i.e. UInt16.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 16-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int16 (including Inf), returns the maximum\nvalue of Int16 (i.e. Int16.maxValue). If it is smaller than the minimum value for Int16\n(including -Inf), returns the minimum value of Int16 (i.e. Int16.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 16-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt16. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt16 value (i.e. UInt16.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 16-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int16 (including Inf), returns the maximum\nvalue of Int16 (i.e. Int16.maxValue). If it is smaller than the minimum value for Int16\n(including -Inf), returns the minimum value of Int16 (i.e. Int16.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 32-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt32. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt32 value (i.e. UInt32.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 32-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt32. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt32 value (i.e. UInt32.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 32-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int32 (including Inf), returns the maximum\nvalue of Int32 (i.e. Int32.maxValue). If it is smaller than the minimum value for Int32\n(including -Inf), returns the minimum value of Int32 (i.e. Int32.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 32-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int32 (including Inf), returns the maximum\nvalue of Int32 (i.e. Int32.maxValue). If it is smaller than the minimum value for Int32\n(including -Inf), returns the minimum value of Int32 (i.e. Int32.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 64-bit unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt64. Returns 0 if the Float is negative or NaN, and returns the\nlargest UInt64 value (i.e. UInt64.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 64-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int64 (including Inf), returns the maximum\nvalue of Int64 (i.e. Int64.maxValue). If it is smaller than the minimum value for Int64\n(including -Inf), returns the minimum value of Int64 (i.e. Int64.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a 64-bit unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of UInt64. Returns 0 if the Float32 is negative or NaN, and returns\nthe largest UInt64 value (i.e. UInt64.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest 64-bit signed integer, rounding towards zero.If the Float is larger than the maximum value for Int64 (including Inf), returns the maximum\nvalue of Int64 (i.e. Int64.maxValue). If it is smaller than the minimum value for Int64\n(including -Inf), returns the minimum value of Int64 (i.e. Int64.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts a floating-point number to a word-sized unsigned integer.If the given Float is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of USize. Returns 0 if the Float is negative or NaN, and returns the\nlargest USize value (i.e. USize.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nConverts a floating-point number to a word-sized unsigned integer.If the given Float32 is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of USize. Returns 0 if the Float32 is negative or NaN, and returns the\nlargest USize value (i.e. USize.size - 1) if the float is larger than it.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest word-sized signed integer, rounding towards zero.If the Float is larger than the maximum value for ISize (including Inf), returns the maximum\nvalue of ISize (i.e. ISize.maxValue). If it is smaller than the minimum value for ISize\n(including -Inf), returns the minimum value of ISize (i.e. ISize.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nTruncates a floating-point number to the nearest word-sized signed integer, rounding towards zero.If the Float is larger than the maximum value for ISize (including Inf), returns the maximum\nvalue of ISize (i.e. ISize.maxValue). If it is smaller than the minimum value for ISize\n(including -Inf), returns the minimum value of ISize (i.e. ISize.minValue). If it is NaN,\nreturns 0.This function does not reduce in the kernel.\n\nConverts an integer into the closest-possible 64-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of Float is exceeded.\n\nConverts an integer into the closest-possible 32-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of Float32 is exceeded.\n\nConverts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of Float is exceeded.\n\nConverts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of Float32 is exceeded.\n\nComputes m * 2^e.\n\nComputes m * 2^e.\n\nSplits the given float x into a significand/exponent pair (s, i) such that x = s * 2^i where\ns ∈ (-1;-0.5] ∪ [0.5; 1). Returns an undefined value if x is not finite.This function does not reduce in the kernel. It is implemented in compiled code by the C function\nfrexp.\n\nSplits the given float x into a significand/exponent pair (s, i) such that x = s * 2^i where\ns ∈ (-1;-0.5] ∪ [0.5; 1). Returns an undefined value if x is not finite.This function does not reduce in the kernel. It is implemented in compiled code by the C function\nfrexp.\n\n","context":"Lean Reference\u0009Basic Types\u0009Floating-Point Numbers\u0009API Reference","header":"19.6.2.3. Conversions","id":"/Basic-Types/Floating-Point-Numbers/#The-Lean-Language-Reference--Basic-Types--Floating-Point-Numbers--API-Reference--Conversions"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Creation":{"contents":"Creates a new empty tree set. It is also possible and recommended to\nuse the empty collection notations ∅ and {} to create an empty tree set. simp replaces\nempty with ∅.\n\n","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Tree-Based Sets","header":"19.18.10.1. Creation","id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Sets--Creation"},"/Coercions/Implementation-Details/#coercion-impl-details":{"contents":"Only ordinary coercion insertion uses chaining.\nInserting coercions to a sort or a function uses ordinary instance synthesis.\nSimilarly, dependent coercions are not chained.\n\n\n\n\n\n","context":"Lean Reference\u0009Coercions","header":"12.5. Implementation Details","id":"/Coercions/Implementation-Details/#coercion-impl-details"},"/Error-Explanations/lean___redundantMatchAlt/#The-Lean-Language-Reference--Error-Explanations--lean___redundantMatchAlt--Examples":{"contents":"Incorrect ordering of pattern matchesdef seconds : List (List α) → List α\n  | [] => []\n  | _ :: xss => seconds xss\n  | (_ :: x :: _) :: xss => x :: seconds xss\n<invalid output>def seconds : List (List α) → List α\n  | [] => []\n  | (_ :: x :: _) :: xss => x :: seconds xss\n  | _ :: xss => seconds xss\nSince any expression matching (_ :: x :: _) :: xss will also match _ :: xss, the last\nalternative in the broken implementation is never reached. We resolve this by moving the more\nspecific alternative before the more general one.\n\nUnnecessary fallback clauseexample (p : Nat × Nat) : IO Nat := do\n  let (m, n) := p\n    | return 0\n  return m + n\n<invalid output>example (p : Nat × Nat) : IO Nat := do\n  let (m, n) := p\n  return m + n\nHere, the fallback clause serves as a catch-all for all values of p that do not match (m, n).\nHowever, no such values exist, so the fallback clause is unnecessary and can be removed. A similar\nerror arises when using if let pat := e when e will always match pat.\n\nPattern treated as variable, not constructorexample (xs : List Nat) : Bool :=\n  match xs with\n  | nil => false\n  | _ => true\n<invalid output>example (xs : List Nat) : Bool :=\n  match xs with\n  | .nil => false\n  | _ => true\nIn the original example, nil is treated as a variable, not as a constructor name, since this\ndefinition is not within the List namespace. Thus, all values of xs will match the first\npattern, rendering the second unused. Notice that the constructor-name-as-variable linter displays a\nwarning at nil, indicating its similarity to a valid constructor name. Using dot-prefix notation,\nas shown in the fixed example, or specifying the full constructor name List.nil achieves the\nintended behavior.\n\n","context":"Lean Reference\u0009Error Explanations\u0009lean.redundantMatchAlt","header":"Examples","id":"/Error-Explanations/lean___redundantMatchAlt/#The-Lean-Language-Reference--Error-Explanations--lean___redundantMatchAlt--Examples"},"/The-Type-System/Functions/#function-api-properties":{"contents":"A function f : α → β is called injective if f x = f y implies x = y.\n\nA function f : α → β is called surjective if every b : β is equal to f a\nfor some a : α.\n\nLeftInverse g f means that g is a left inverse to f. That is, g ∘ f = id.\n\nHasLeftInverse f means that f has an unspecified left inverse.\n\nRightInverse g f means that g is a right inverse to f. That is, f ∘ g = id.\n\nHasRightInverse f means that f has an unspecified right inverse.\n\n","context":"Lean Reference\u0009Type System\u0009Functions\u0009API Reference","header":"4.1.5.1. Properties","id":"/The-Type-System/Functions/#function-api-properties"},"/releases/v4.0.0-m1/#release-v4___0___0-m1":{"contents":"The Lean development team is proud to announce the first milestone release of Lean 4. This release is aimed at experimentation with the new features of Lean 4, eventually leading to a full release of 4.0.0 ready for general use.\n\nThis release is the result of almost three years of work since the release of Lean 3.4.0, reworking, extending, and improving almost all aspects of Lean. More information about Lean 4 can be found in the official documentation as well as in the introductory talk \"An overview of Lean 4\" at Lean Together 2021.\n\nLeonardo de Moura & Sebastian Ullrich\n\n\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.0.0-m1 (2021-01-04)","id":"/releases/v4.0.0-m1/#release-v4___0___0-m1"},"/releases/v4.23.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___23___0-_LPAR_2025-09-15_RPAR_--Language":{"contents":"* #6732 adds support for the clear tactic in conversion mode.* #8666 adjusts the experimental module system to not import the IR of\nnon-meta declarations. It does this by replacing such IR with opaque\nforeign declarations on export and adjusting the new compiler\naccordingly.* #8842 fixes the bug that collectAxioms didn't collect axioms\nreferenced by other axioms. One of the results of this bug is that\naxioms collected from a theorem proved by native_decide may not\ninclude Lean.trustCompiler.* #9015 makes isDefEq detect more stuck definitional equalities\ninvolving smart unfoldings. Specifically, if t =?= defn ?m and defn\nmatches on its argument, then this equality is stuck on ?m. Prior to\nthis change, we would not see this dependency and simply return false.* #9084 adds binrel% macros for != and ≠ notation defined in\nInit.Core. This allows the elaborator to insert coercions on both\nsides of the relation, instead of committing to the type on the left\nhand side.* #9090 fixes a bug in whnfCore where it would fail to reduce\napplications of recursors/auxiliary defs.* #9097 ensures that mspec uses the configured transparency setting\nand makes mvcgen use default transparency when calling mspec.* #9099 improves the “expected type mismatch” error message by omitting\nthe type's types when they are defeq, and putting them into separate\nlines when not.* #9103 prevents truncation of panic! messages containing null bytes.* #9108 fixes an issue that may have caused inline expressions in\nmessages to be unnecessarily rendered on a separate line.* #9113 improves the grind doc string and tries to make it more\napproachable to new user.* #9130 fixes unexpected occurrences of the Grind.offset gadget in\nground patterns. See new test* #9131 adds a usedLetOnly parameter to LocalContext.mkLambda and\nLocalContext.mkForall, to parallel the MetavarContext versions.* #9133 adds support for a^(m+n) in the grind normalizer.* #9143 removes a rather ugly hack in the module system, exposing the\nbodies of theorems whose type mention WellFounded.* #9146 adds \"safe\" polynomial operations to grind ring. The use the\nusual combinators: withIncRecDepth and checkSystem.* #9149 generalizes the a^(m+n) grind normalizer to any semirings.\nExample:variable [Field R]\n\n* #9150 adds a missing case in the toPoly function used in grind.* #9153 improves the linarith markVars, and ensures it does not\nproduce spurious issue messages.* #9168 resolves a defeq diamond, which caused a problem in Mathlib:import Mathlib\n\n* #9172 fixes a bug at matchEqBwdPat. The type may contain pattern\nvariables.* #9173 fixes an incompatibility in the experimental module system when\ntrying to combine wellfounded recursion with public exposed definitions.* #9176 makes mvcgen split ifs rather than applying specifications.\nDoing so fixes a bug reported by Rish.* #9182 tries to improve the E-matching pattern inference for grind.\nThat said, we still need better tools for annotating and maintaining\ngrind annotations in libraries.* #9184 fixes stealing of ⇓ syntax by the new notation for total\npostconditions by demoting it to non-builtin syntax and scoping it to\nStd.Do.* #9191 lets the equation compiler unfold abstracted proofs again if\nthey would otherwise hide recursive calls.This fixes #8939.* #9193 fixes the unexpected kernel projection issue reported by issue\n#9187* #9194 makes the logic and tactics of Std.Do universe polymorphic, at\nthe cost of a few definitional properties arising from the switch from\nProp to ULift Prop in the base case SPred [].* #9196 implements forall normalization using a simproc instead of\nrewriting rules in grind. This is the first part of the PR, after\nupdate stage0, we must remove the normalization theorems.* #9200 implements exists normalization using a simproc instead of\nrewriting rules in grind. This is the first part of the PR, after update\nstage0, we must remove the normalization theorems.* #9202 extends the Eq simproc used in grind. It covers more cases\nnow. It also adds 3 reducible declarations to the list of declarations\nto unfold.* #9214 implements support for local and scoped grind_pattern\ncommands.* #9225 improves the congr tactic so that it can handle function\napplications with fewer arguments than the arity of the head function.\nThis also fixes a bug where congr could not make progress with\nSet-valued functions in Mathlib, since Set was being unfolded and\nmaking such functions have an apparently higher arity.* #9228 improves the startup time for grind ring by generating the\nrequired type classes on demand. This optimization is particularly\nrelevant for files that make hundreds of calls to grind, such as\ntests/lean/run/grind_bitvec2.lean. For example, before this change,\ngrind spent 6.87 seconds synthesizing type classes, compared to 3.92\nseconds after this PR.* #9241 ensures that the type class instances used to implement the\nToInt adapter (in grind cutsat) are generated on demand.* #9244 improves the instance generation in the grind linarith module.* #9251 demotes the builtin elaborators for Std.Do.PostCond.total and\nStd.Do.Triple into macros, following the DefEq improvements of #9015.* #9267 optimizes support for Decidable instances in grind. Because\nDecidable is a subsingleton, the canonicalizer no longer wastes time\nnormalizing such instances, a significant performance bottleneck in\nbenchmarks like grind_bitvec2.lean. In addition, the\ncongruence-closure module now handles Decidable instances, and can\nsolve examples such as:example (p q : Prop) (h₁ : Decidable p) (h₂ : Decidable (p ∧ q)) : (p ↔ q) → h₁ ≍ h₂ := by\n  grind\n* #9271 improves the performance of the formula normalizer used in\ngrind.* #9287 rewords the \"application type mismatch\" error message so that\nthe argument and its type precede the application expression.* #9293 replaces the reduceCtorEq simproc used in grind by a much\nmore efficient one. The default one use in simp is just overhead\nbecause the grind normalizer is already normalizing arithmetic.\nIn a separate PR, we will push performance improvements to the default\nreduceCtorEq.* #9305 uses the mkCongrSimpForConst? API in simp to reduce the\nnumber of times the same congruence lemma is generated. Before this PR,\ngrind would spend 1.5s creating congruence theorems during\nnormalization in the grind_bitvec2.lean benchmark. It now spends\n0.6s. should make an even bigger difference after we merge\n#9300.* #9315 adds improves the \"invalid named argument\" error message in\nfunction applications and match patterns by providing clickable hints\nwith valid argument names. In so doing, it also fixes an issue where\nthis error message would erroneously flag valid match-pattern argument\nnames.* #9316 adds clickable code-action hints to the \"invalid case name\"\nerror message.* #9317 adds to the \"fields missing\" error message for structure\ninstance notation a code-action hint that inserts all missing fields.* #9324 improves the functions for checking whether two terms are\ndisequal in grind* #9325 optimizes the Boolean disequality propagator used in grind.* #9326 optimizes propagateEqUp used in grind.* #9340 modifies the encoding from Nat to Int used in grind cutsat. It is simpler, more extensible, and similar to the generic\nToInt. After update stage0, we will be able to delete the leftovers.* #9351 optimizes the grind preprocessing steps by skipping steps when\nthe term is already present in the hash-consing table.* #9358 adds support for generating lattice-theoretic (co)induction\nproof principles for predicates defined via mutual blocks using\ninductive_fixpoint/coinductive_fixpoint constructs.* #9367 implements a minor optimization to the grind preprocessor.* #9369 optimizes the grind preprocessor by skipping unnecessary steps\nwhen possible.* #9371 fixes an issue that caused some deriving handlers to fail when\nthe name of the type being declared matched that of a declaration in an\nopen namespace.* #9372 fixes a performance issue that occurs when generating equation\nlemmas for functions that use match-expressions containing several\nliterals. This issue was exposed by #9322 and arises from a combination\nof factors:1. Literal values are compiled into a chain of dependent if-then-else\nexpressions.2. Dependent if-then-else expressions are significantly more expensive\nto simplify than regular ones.3. The split tactic selects a target, splits it, and then invokes\nsimp on the resulting subgoals. Moreover, simp traverses the entire\ngoal bottom-up and does not stop after reaching the target.* #9385 replaces the isDefEq test in the simpEq simproc used in\ngrind. It is too expensive.* #9386 improves a confusing error message that occurred when attempting\nto project from a zero-field structure.* #9387 adds a hint to the \"invalid projection\" message suggesting the\ncorrect nested projection for expressions of the form t.n where t is\na tuple and n > 2.* #9395 fixes a bug at mkCongrSimpCore?. It fixes the issue reported\nby @joehendrix at #9388.\nThe fix is just commit: afc4ba617fe2ca5828e0e252558d893d7791d56b. The\nrest of the PR is just cleaning up the file.* #9398 avoids the expensive inferType call in simpArith. It also\ncleans up some of the code and removes anti-patterns.* #9408 implements a simple optimization: dependent implications are no\nlonger treated as E-matching theorems in grind. In\ngrind_bitvec2.lean, this change saves around 3 seconds, as many\ndependent implications are generated. Example: ∀ (h : i + 1 ≤ w), x.abs.getLsbD i = x.abs[i]\n* #9414 increases the number of cases where isArrowProposition returns\na result other than .undef. This function is used to implement the\nisProof predicate, which is invoked on every subterm visited by\nsimp.* #9421 fixes a bug that caused error explanations to \"steal\" the\nInfoview's container in the Lean web editor.* #9423 updates the formatting of, and adds explanations for, \"unknown\nidentifier\" errors as well as \"failed to infer type\" errors for binders\nand definitions.* #9424 improves the error messages produced by the split tactic,\nincluding suggesting syntax fixes and related tactics with which it\nmight be confused.* #9443 makes cdot function expansion take hygiene information into\naccount, fixing \"parenthesis capturing\" errors that can make erroneous\ncdots trigger cdot expansion in conjunction with macros. For example,\ngivenmacro \"baz% \" t:term : term => `(1 + ($t))\nit used to be that baz% · would expand to 1 + fun x => x, but now\nthe parentheses in ($t) do not capture the cdot. We also fix an\noversight where cdot function expansion ignored the fact that type\nascriptions and tuples were supposed to delimit expansion, and also now\nthe quotation prechecker ignores the identifier in hygieneInfo. (#9491\nadded the hygiene information to the parenthesis and cdot syntaxes.)* #9447 ensures that mvcgen not only tries to close stateful subgoals\nby assumption, but also pure Lean goals.* #9448 addresses the lean crash (stack overflow) with nested induction\nand the generation of the SizeOf spec lemmas, reported at #9018.* #9451 adds support in the mintro tactic for introducing let/have\nbinders in stateful targets, akin to intro. This is useful when\nspecifications introduce such let bindings.* #9454 introduces tactic mleave that leaves the SPred proof mode by\neta expanding through its abstractions and applying some mild\nsimplifications. This is useful to apply automation such as grind\nafterwards.* #9464 makes PProdN.reduceProjs also look for projection functions.\nPreviously, all redexes were created by the functions in PProdN, which\nused primitive projections. But with mkAdmProj the projection\nfunctions creep in via the types of the admissible_pprod_fst theorem.\nSo let's just reduce both of them.* #9472 fixes another issue at the congr_simp theorems that was\naffecting Mathlib. Many thanks to Johan Commelin for creating the mwe.* #9476 fixes the bridge between Nat and Int in grind cutsat.* #9479 improves the evalInt? function, which is used to evaluate\nconfiguration parameters from the ToInt type class. also adds\na new evalNat? function for handling the IsCharP type class, and\nintroduces a configuration option:grind (exp := <num>)\nThis option controls the maximum exponent size considered during\nexpression evaluation. Previously, evalInt? used whnf, which could\nrun out of stack space when reducing terms such as 2^1024.* #9480 adds a feature where structure constructors can override the\ninferred binder kinds of the type's parameters. In the following, the\n(p) binder on toLp causes p to be an explicit parameter to\nWithLp.toLp:structure WithLp (p : Nat) (V : Type) where toLp (p) ::\n  ofLp : V\nThis reflects the syntax of the feature added in #7742 for overriding\nbinder kinds of structure projections. Similarly, only those parameters\nin the header of the structure may be updated; it is an error to try\nto update binder kinds of parameters included via variable.* #9481 fixes a kernel type mismatch that occurs when using grind on\ngoals containing non-standard OfNat.ofNat terms. For example, in issue\n#9477, the 0 in the theorem range_lower has the form:(@OfNat.ofNat\n  (Std.PRange.Bound (Std.PRange.RangeShape.lower (Std.PRange.RangeShape.mk Std.PRange.BoundShape.closed Std.PRange.BoundShape.open)) Nat)\n  (nat_lit 0)\n  (instOfNatNat (nat_lit 0)))\ninstead of the more standard form:(@OfNat.ofNat\n  Nat\n  (nat_lit 0)\n  (instOfNatNat (nat_lit 0)))\n* #9487 fixes an incorrect proof term constructed by grind linarith,\nas reported in #9485.* #9491 adds hygiene info to paren/tuple/typeAscription syntaxes, which\nwill be used to implement hygienic cdot function expansion in #9443.* #9496 improves the error messages produced by the set_option\ncommand.* #9500 adds a HPow \\a Int \\a field to Lean.Grind.Field, and\nsufficient axioms to connect it to the operations, so that in future we\ncan reason about exponents in grind. To avoid collisions, we also move\nthe HPow \\a Nat \\a field in Semiring from the extends clause to a\nfield. Finally, we add some failing tests about normalizing exponents.* #9505 removes vestigial syntax definitions in\nLean.Elab.Tactic.Do.VCGen that when imported undefine the mvcgen\ntactic. Now it should be possible to import Mathlib and still use\nmvcgen.* #9506 adds a few missing simp lemmas to mleave.* #9507 makes mvcgen mintro let/have bindings.* #9509 surfaces kernel diagnostics even in example.* #9512 makes mframe, mspec and mvcgen respect hygiene.\nInaccessible stateful hypotheses can now be named with a new tactic\nmrename_i that works analogously to rename_i.* #9516 ensures that private declarations made inaccessible by the\nmodule system are noted in the relevant error messages* #9518 ensures previous \"is marked as private\" messages are still\ntriggered under the module system* #9520 corrects the changes to Lean.Grind.Field made in #9500.* #9522 uses withAbstractAtoms to prevent the kernel from accidentally\nreducing the atoms in the arith normlizer while typechecking. This PR\nalso sets implicitDefEqProofs := false in the grind normalizer* #9532 generalizes Process.output and Process.run with an optional\nString argument that can be piped to stdin.* #9551 fixes the error position for the \"dependent elimination failed\"\nerror for the cases tactic.* #9553 fixes a bug introduced in #7830 where if the cursor is at the\nindicated positionexample (as bs : List Nat) : (as.append bs).length = as.length + bs.length := by\n  induction as with\n  | nil => -- cursor\n  | cons b bs ih =>\nthen the Infoview would show \"no goals\" rather than the nil goal. The\nPR also fixes a separate bug where placing the cursor on the next line\nafter the induction/cases tactics like in  induction as with\n  | nil => sorry\n  | cons b bs ih => sorry\n  I -- < cursor\nwould report the original goal in the goal list. Furthermore, there are\nnumerous improvements to error recovery (including allGoals-type logic\nfor pre-tactics) and the visible tactic states when there are errors.\nAdds Tactic.throwOrLogErrorAt/Tactic.throwOrLogError for throwing or\nlogging errors depending on the recovery state.* #9571 restores the feature where in induction/cases for Nat, the\nzero and succ labels are hoverable. This was added in #1660, but\nbroken in #3629 and #3655 when custom eliminators were added. In\ngeneral, if a custom eliminator T.elim for an inductive type T has\nan alternative foo, and T.foo is a constant, then the foo label\nwill have T.foo hover information.* #9574 adds the option abstractProof to control whether grind\nautomatically creates an auxiliary theorem for the generated proof or\nnot.* #9575 optimizes the proof terms generated by grind ring. For\nexample, before this PR, the kernel took 2.22 seconds (on a M4 Max) to\ntype-check the proof in the benchmark grind_ring_5.lean; it now takes\nonly 0.63 seconds.* #9578 fixes an issue in grind's disequality proof construction. The\nissue occurs when an equality is merged with the False equivalence\nclass, but it is not the root of its congruence class, and its\ncongruence root has not yet been merged into the False equivalence\nclass yet.* #9579 ensures ite and dite are to selected as E-matching patterns.\nThey are bad patterns because the then/else branches are only\ninternalized after grind decided whether the condition is\nTrue/False.* #9592 updates the styling and wording of error messages produced in\ninductive type declarations and anonymous constructor notation,\nincluding hints for inferable constructor visibility updates.* #9595 improves the error message displayed when writing an invalid\nprojection on a free variable of function type.* #9606 adds notes to the deprecation warning when the replacement\nconstant has a different type, visibility, and/or namespace.* #9625 improves trace messages around wf_preprocess.* #9628 introduces a mutual_induct variant of the generated\n(co)induction proof principle for mutually defined (co)inductive\npredicates. Unlike the standard (co)induction principle (which projects\nconclusions separately for each predicate), mutual_induct produces a\nconjunction of all conclusions.* #9633 updates various error messages produced by or associated with\nbuilt-in tactics and adapts their formatting to current conventions.* #9634 modifies dot identifier notation so that (.a : T) resolves\nT.a with respect to the root namespace, like for generalized field\nnotation. This lets the notation refer to private names, follow aliases,\nand also use open namespaces. The LSP completions are improved to follow\nhow dot ident notation is resolved, but it doesn't yet take into account\naliases or open namespaces.* #9637 improves the readability of the \"maximum universe level offset\nexceeded\" error message.* #9646 uses a more simple approach to proving the unfolding theorem for\na function defined by well-founded recursion. Instead of looping a bunch\nof tactics, it uses simp in single-pass mode to (try to) exactly undo\nthe changes done in WF.Fix, using a dedicated theorem that pushes the\nextra argument in for each matcher (or casesOn).* #9649 fixes an issue where a macro unfolding to multiple commands\nwould not be accepted inside mutual* #9653 adds error explanations for two common errors caused by large\nelimination from Prop. To support this functionality, \"nested\" named\nerrors thrown by sub-tactics are now able to display their error code\nand explanation.* #9666 addresses an outstanding feature in the module system to\nautomatically mark let rec and where helper declarations as private\nunless they are defined in a public context such as under @[expose].* #9670 add constructors .intCast k and .natCast k to\nCommRing.Expr. We need them because terms such as Nat.cast (R := α) 1 and (1 : α) are not definitionally equal. This is pervaise in\nMathlib for the numerals 0 and 1.* #9671 fixes support for SMul.smul in grind ring. SMul.smul\napplications are now normalized. Example:example (x : BitVec 2) : x - 2 • x + x = 0 := by\n  grind\n* #9675 adds support for Fin.val in grind cutsat. Examples:example (a b : Fin 2) (n : Nat) : n = 1 → ↑(a + b) ≠ n → a ≠ 0 → b = 0 → False := by\n  grind\n\n* #9676 adds normalizers for nonstandard arithmetic instances. The types\nNat and Int have built-in support in grind, which uses the\nstandard instances for these types and assumes they are the ones in use.\nHowever, users may define their own alternative instances that are\ndefinitionally equal to the standard ones. normalizes such\ninstances using simprocs. This situation actually occurs in Mathlib.\nExample:class Distrib (R : Type _) extends Mul R where\n\n* #9679 produces a warning for redundant grind arguments.* #9682 fixes a regression introduced by an optimization in the\nunfoldReducible step used by the grind normalizer. It also ensures\nthat projection functions are not reduced, as they are folded in a later\nstep.* #9686 applies clear to implementation detail local declarations\nduring the grind preprocessing steps.* #9699 adds propagation rules for functions that take singleton types.\nThis feature is useful for discharging verification conditions produced\nby mvcgen. For example:example (h : (fun (_ : Unit) => x + 1) = (fun _ => 1 + y)) : x = y := by\n  grind\n* #9700 fixes assertion violations when checkInvariants is enabled in\ngrind* #9701 switches to a non-verloading local Std.Do.Triple notation in\nSpecLemmas.lean to work around a stage2 build failure.* #9702 fixes an issue in the match elaborator where pattern variables\nlike __x would not have the kind implDetail in the local context.\nNow kindOfBinderName is LocalDeclKind.ofBinderName.* #9704 optimizes the proof terms produced by grind cutsat. Additional\nperformance improvements will be merged later.* #9706 combines Poly.combine_k and Poly.mul_k steps used in the\ngrind cutsat proof terms.* #9710 improves some of the proof terms produced by grind ring and\ngrind cutsat.* #9714 adds a version of CommRing.Expr.toPoly optimized for kernel\nreduction. We use this function not only to implement grind ring, but\nalso to interface the ring module with grind cutsat.* #9716 moves the validation of cross-package import all to Lake and\nthe syntax validation of import keywords (public, meta, and all)\nto the two import parsers.* #9728 fixes #9724* #9735 extends the propagation rule implemented in #9699 to constant\nfunctions.* #9736 implements the option mvcgen +jp to employ a slightly lossy VC\nencoding for join points that prevents exponential VC blowup incurred by\nnaïve splitting on control flow.* #9754 make mleave apply at * and improve its simp set in order to\ndischarge some more trivialities (#9581).* #9755 implements a mrevert ∀n tactic that \"eta-reduces\" the stateful\ngoal and is adjoint to mintro ∀x1 ... ∀xn.* #9767 fixes equality congruence proof terms contructed by grind.* #9772 fixes a bug in the projection over constructor propagator used\nin grind. It may construct type incorrect terms when a equivalence\nclass contains heterogeneous equalities.* #9776 combines the simplification and unfold-reducible-constants steps\nin grind to ensure that no potential normalization steps are missed.* #9780 extends the test suite for grind working category theory, to\nhelp debug outstanding problems in Mathlib.* #9781 ensures that mvcgen is hygienic. The goals it generates should\nnow introduce all locals inaccessibly.* #9785 splits out an implementation detail of\nMVarId.getMVarDependencies into a top-level function. Aesop was relying\non the function defined in the where clause, which is no longer possible\nafter #9759.* #9798 introduces Lean.realizeValue, a new metaprogramming API for\nparallelism-aware caching of MetaM computations* #9800 improves the delta deriving handler, giving it the ability to\nprocess definitions with binders, as well as the ability to recursively\nunfold definitions. Furthermore, delta deriving now tries all explicit\nnon-out-param arguments to a class, and it can handle \"mixin\" instance\narguments. The deriving syntax has been changed to accept general\nterms, which makes it possible to derive specific instances with for\nexample deriving OfNat _ 1 or deriving Module R. The class is\nallowed to be a pi type, to add additional hypotheses; here is a Mathlib\nexample:def Sym (α : Type*) (n : ℕ) :=\n  { s : Multiset α // Multiset.card s = n }\nderiving [DecidableEq α] → DecidableEq _\nThis underscore stands for where Sym α n may be inserted, which is\nnecessary when → is used. The deriving instance command can refer to\nscoped variables when delta deriving as well. Breaking change: the\nderived instance's name uses the instance command's name generator,\nand the new instance is added to the current namespace.* #9804 allows trailing comma in the argument list of simp?, dsimp?,\nsimpa, etc... Previously, it was only allowed in the non ? variants\nof simp, dsimp, simp_all.* #9807 adds Std.List.Zipper.pref to the simp set of mleave.* #9809 adds a script for analyzing grind E-matching annotations. The\nscript is useful for detecting matching loops. We plan to add\nuser-facing commands for running the script in the future.* #9813 fixes an unexpected bound variable panic in unfoldReducible\nused in grind.* #9814 skips the normalizeLevels preprocessing step in grind when\nit is not needed.* #9818 fixes a bug where the DecidableEq deriving handler did not\ntake universe levels into account for enumerations (inductive types\nwhose constructors all have no fields). Closes #9541.* #9819 makes the unsafe t term create an auxiliary opaque\ndeclaration, rather than an auxiliary definition with opaque\nreducibility hints.* #9831 adds a delaborator for Std.Range notation.* #9832 adds simp lemmas SPred.entails_<n> to replace\nSPred.entails_cons which was disfunctional as a simp lemma due to\n#8074.* #9833 works around a DefEq bug in mspec involving delayed\nassignments.* #9834 fixes a bug in mvcgen triggered by excess state arguments to\nthe wp application, a situation which arises when working with\nStateT primitives.* #9841 migrates the ⌜p⌝ notation for embedding pure p : Prop into SPred\nσs to expand into a simple, first-order expression SPred.pure p that can\nbe supported by e-matching in grind.* #9843 makes mvcgen produce deterministic case labels for the\ngenerated VCs. Invariants will be named inv<n> and every other VC will\nbe named vc<n>.*, where the * part serves as a loose indication of\nprovenance.* #9852 removes the inShareCommon quick filter used in grind\npreprocessing steps. shareCommon is no longer used only for fully\npreprocessed terms.* #9853 adds Nat and Int numeral normalizers in grind.* #9857 ensures grind can E-match patterns containing universe\npolymorphic ground sub-patterns. For example, givenset_option pp.universes true in\nattribute [grind?] Id.run_pure\nthe patternId.run_pure.{u_1}: [@Id.run.{u_1} #1 (@pure.{u_1, u_1} `[Id.{u_1}] `[Applicative.toPure.{u_1, u_1}] _ #0)]\ncontains two nested universe polymorphic ground patterns* Id.{u_1}* Applicative.toPure.{u_1, u_1}* #9860 fixes E-matching theorem activation in grind.* #9865 adds improved support for proof-by-reflection to the kernel type\nchecker. It addresses the performance issue exposed by #9854. With this\nPR, whenever the kernel type-checks an argument of the form eagerReduce _, it enters \"eager-reduction\" mode. In this mode, the kernel is more\neager to reduce terms. The new eagerReduce _ hint is often used to\nwrap Eq.refl true. The new hint should not negatively impact any\nexisting Lean package.* #9867 fixes a nondeterministic behavior in grind ring.* #9880 ensures a local forall is activated at most once per pattern in\ngrind.* #9883 refines the warning message for redundant grind arguments. It\nis not based on the actual inferred pattern instead provided kind.* #9885 is initially motivated by noticing Lean.Grind.Preorder.toLE\nappearing in long Mathlib typeclass searches; this change will prevent\nthese searches. These changes are also helpful preparation for\npotentially dropping the custom Lean.Grind.* typeclasses, and unifying\nwith the new typeclasses introduced in #9729.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.23.0 (2025-09-15)","header":"Language","id":"/releases/v4.23.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___23___0-_LPAR_2025-09-15_RPAR_--Language"}});