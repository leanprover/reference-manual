window.docContents[23].resolve({"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Targets--Executables":{"contents":"Executable TargetsTo define an executable in which all configurable fields have their default values, use lean_exe with no further fields.The default configuration can be modified by providing the new values.\n\nThe fields of lean_exe are those of the LeanExeConfig structure.\n\nA Lean executable's declarative configuration.The subdirectory of the package's source directory containing the executable's\nLean source file. Defaults simply to said srcDir.(This will be passed to lean as the -R option.)The root module of the binary executable.\nShould include a main definition that will serve\nas the entry point of the program.The root is built by recursively building its\nlocal imports (i.e., fellow modules of the workspace).Defaults to the name of the target.The name of the binary executable.\nDefaults to the target name with any . replaced with a -.An Array of targets to build before the executable's modules.Deprecated. Use needs instead.\nAn Array of target names to build before the executable's modules.Enables the executable to interpret Lean files (e.g., via\nLean.Elab.runFrontend) by exposing symbols within the  executable\nto the Lean interpreter.Implementation-wise, on Windows, the Lean shared libraries are linked\nto the executable and, on other systems, the executable is linked with\n-rdynamic. This increases the size of the binary on Linux and, on Windows,\nrequires libInit_shared.dll and libleanshared.dll to  be co-located\nwith the executable or part of PATH (e.g., via lake exe). Thus, this\nfeature should only be enabled when necessary.Defaults to false.The module facets to build and combine into the executable.\nIf shouldExport is true, the module facets should export any symbols\na user may expect to lookup in the executable. For example, the Lean\ninterpreter will use exported symbols in the executable. Thus, shouldExport\nwill be true if supportInterpreter := true.Defaults to a singleton of Module.oExportFacet (if shouldExport) or\nModule.oFacet. That is, the  object file compiled from the Lean source,\npotentially with exported Lean symbols.\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Configuration File Format\u0009Lean Format\u0009Targets","header":"22.1.3.2.4.2. Executables","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Lean-Format--Targets--Executables"},"/Functors___-Monads-and--do--Notation/Varieties-of-Monads/#The-Lean-Language-Reference--Functors___-Monads-and--do--Notation--Varieties-of-Monads--Exceptions--Exceptions":{"contents":"Except ε α is a type which represents either an error of type ε or a successful result with a\nvalue of type α.Except ε : Type u → Type v is a Monad that represents computations that may throw exceptions:\nthe pure operation is Except.ok and the bind operation returns the first encountered\nExcept.error.A failure value of type εA success value of type α\n\nA successful computation in the Except ε monad: a is returned, and no exception is thrown.\n\nSequences two operations that may throw exceptions, allowing the second to depend on the value\nreturned by the first.If the first operation throws an exception, then it is the result of the computation. If the first\nsucceeds but the second throws an exception, then that exception is the result. If both succeed,\nthen the result is the result of the second computation.This is the implementation of the >>= operator for Except ε.\n\nTransforms a successful result with a function, doing nothing when an exception is thrown.Examples:* (pure 2 : Except String Nat).map toString = pure 2* (throw \"Error\" : Except String Nat).map toString = throw \"Error\"\n\nTransforms exceptions with a function, doing nothing on successful results.Examples:* (pure 2 : Except String Nat).mapError (·.length) = pure 2* (throw \"Error\" : Except String Nat).mapError (·.length) = throw 5\n\nHandles exceptions thrown in the Except ε monad.If ma is successful, its result is returned. If it throws an exception, then handle is invoked\non the exception's value.Examples:* (pure 2 : Except String Nat).tryCatch (pure ·.length) = pure 2* (throw \"Error\" : Except String Nat).tryCatch (pure ·.length) = pure 5* (throw \"Error\" : Except String Nat).tryCatch (fun x => throw (\"E: \" ++ x)) = throw \"E: Error\"\n\nRecovers from exceptions thrown in the Except ε monad. Typically used via the <|> operator.Except.tryCatch is a related operator that allows the recovery procedure to depend on which\nexception was thrown.\n\nReturns true if the value is Except.ok, false otherwise.\n\nReturns none if an exception was thrown, or some around the value on success.Examples:* (pure 10 : Except String Nat).toOption = some 10* (throw \"Failure\" : Except String Nat).toOption = none\n\nReturns true if the value is Except.ok, false otherwise.\n\n","context":"Lean Reference\u0009Functors, Monads and  do -Notation\u0009Varieties of Monads\u0009Exceptions","header":"14.5.7.1. Exceptions","id":"/Functors___-Monads-and--do--Notation/Varieties-of-Monads/#The-Lean-Language-Reference--Functors___-Monads-and--do--Notation--Varieties-of-Monads--Exceptions--Exceptions"},"/Notations-and-Macros/Macros/#token-antiquotations":{"contents":"In addition to antiquotations of complete syntax, Lean features token antiquotations which allow the source information of an atom to be replaced with the source information from some other syntax.\nThe resulting synthetic source information is marked canonical so that it will be used for error messages, proof states, and other feedback.\nThis is primarily useful to control the placement of error messages or other information that Lean reports to users.\nA token antiquotation does not allow an arbitrary atom to be inserted via evaluation.\nA token antiquotation consists of an atom (that is, a keyword)\n\nToken AntiquotationsToken antiquotations replace the source information (of type SourceInfo) on a token with the source information from some other syntax.\n\n\n\n","context":"Lean Reference\u0009Notations and Macros\u0009Macros\u0009Quotation","header":"20.5.3.3. Token Antiquotations","id":"/Notations-and-Macros/Macros/#token-antiquotations"},"/Type-Classes/Instance-Synthesis/#The-Lean-Language-Reference--Type-Classes--Instance-Synthesis--Options":{"contents":"use optimization that relies on 'morally canonical' instances during type class resolution\n\nmaximum amount of heartbeats per typeclass resolution problem. A heartbeat is number of (small) memory allocations (in thousands), 0 means no limit\n\nmaximum number of instances used to construct a solution in the type class instance synthesis procedure\n\n","context":"Lean Reference\u0009Type Classes\u0009Instance Synthesis","header":"11.3.8. Options","id":"/Type-Classes/Instance-Synthesis/#The-Lean-Language-Reference--Type-Classes--Instance-Synthesis--Options"},"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Highlights--Additional-new-featues":{"contents":"* #6300 adds the debug.proofAsSorry option. When enabled, the proofs\nof theorems are ignored and replaced with sorry.* #6362 adds the --error=kind option (shorthand: -Ekind) to the\nlean CLI. When set, messages of kind (e.g.,\nlinter.unusedVariables) will be reported as errors. This setting does\nnothing in interactive contexts (e.g., the server).* #6366 adds support for Float32 and fixes a bug in the runtime.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.16.0 (2025-02-03)\u0009Highlights","header":"Additional new featues","id":"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Highlights--Additional-new-featues"},"/releases/v4.22.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___22___0-_LPAR_2025-08-14_RPAR_--Highlights--Signature-help":{"contents":"#8511 implements signature help support in the editors.\nSee the demo in the PR description.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.22.0 (2025-08-14)\u0009Highlights","header":"Signature help","id":"/releases/v4.22.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___22___0-_LPAR_2025-08-14_RPAR_--Highlights--Signature-help"}});