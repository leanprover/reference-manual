window.docContents[84].resolve({"/Type-Classes/Instance-Declarations/#instance-priorities":{"contents":"Instances may be assigned priorities.\nDuring instance synthesis, higher-priority instances are preferred; see the section on instance synthesis for details of instance synthesis.\n\nInstance PrioritiesPriorities may be numeric:If no priority is specified, the default priority that corresponds to 1000 is used:Three named priorities are available when numeric values are too fine-grained, corresponding to 100, 500, and 10000 respectively.\nThe mid priority is lower than default.Finally, priorities can be added and subtracted, so default + 2 is a valid priority, corresponding to 1002:\n\n","context":"Lean Reference\u0009Type Classes\u0009Instance Declarations","header":"11.2.3. Instance Priorities","id":"/Type-Classes/Instance-Declarations/#instance-priorities"},"/Type-Classes/Instance-Synthesis/#The-Lean-Language-Reference--Type-Classes--Instance-Synthesis--Instance-Search-Problems":{"contents":"Instance search occurs during the elaboration of (potentially nullary) function applications.\nSome of the implicit parameters' values are forced by others; for instance, an implicit type parameter may be solved using the type of a later value argument that is explicitly provided.\nImplicit parameters may also be solved using information from the expected type at that point in the program.\nThe search for instance implicit arguments may make use of the implicit argument values that have been found, and may additionally solve others.\n\nInstance synthesis begins with the type of the instance-implicit parameter.\nThis type must be the application of a type class to zero or more arguments; these argument values may be known or unknown when search begins.\nIf an argument to a class is unknown, the search process will not instantiate it unless the corresponding parameter is marked as an output parameter, explicitly making it an output of the instance synthesis routine.\n\nSearch may succeed, fail, or get stuck; a stuck search may occur when an unknown argument value becoming known might enable progress to be made.\nStuck searches may be re-invoked when the elaborator has discovered one of the previously-unknown implicit arguments.\nIf this does not occur, stuck searches become failures.\n\n","context":"Lean Reference\u0009Type Classes\u0009Instance Synthesis","header":"11.3.2. Instance Search Problems","id":"/Type-Classes/Instance-Synthesis/#The-Lean-Language-Reference--Type-Classes--Instance-Synthesis--Instance-Search-Problems"},"/releases/v4.0.0-m2/#release-v4___0___0-m2":{"contents":"This is the second milestone release of Lean 4. With too many improvements and bug fixes in almost all parts of the system to list, we would like to single out major improvements to simp and other built-in tactics as well as support for a goal view that make the proving experience more comfortable.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.0.0-m2 (2021-03-02)","id":"/releases/v4.0.0-m2/#release-v4___0___0-m2"}});