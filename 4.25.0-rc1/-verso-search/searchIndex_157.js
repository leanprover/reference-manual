window.docContents[157].resolve({"/Basic-Types/Bitvectors/#BitVec-api":{"contents":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","context":"Lean Reference\u0009Basic Types\u0009Bitvectors","header":"19.5.5. API Reference","id":"/Basic-Types/Bitvectors/#BitVec-api"},"/IO/Files___-File-Handles___-and-Streams/#stdio":{"contents":"On operating systems that are derived from or inspired by Unix, standard input, standard output, and standard error are the names of three streams that are available in each process.\nGenerally, programs are expected to read from standard input, write ordinary output to the standard output, and error messages to the standard error.\nBy default, standard input receives input from the console, while standard output and standard error output to the console, but all three are often redirected to or from pipes or files.\n\nRather than providing direct access to the operating system's standard I/O facilities, Lean wraps them in Streams.\nAdditionally, the IO monad contains special support for replacing or locally overriding them.\nThis extra level of indirection makes it possible to redirect input and output within a Lean program.\n\nReturns the current thread's standard input stream.Use IO.setStdin to replace the current thread's standard input stream.\n\nReading from Standard InputIn this example, IO.getStdin and IO.getStdout are used to get the current standard input and output, respectively.\nThese can be read from and written to.def main : IO Unit := do\n  let stdin ← IO.getStdin\n  let stdout ← IO.getStdout\n  stdout.putStrLn \"Who is it?\"\n  let name ← stdin.getLine\n  stdout.putStr \"Hello, \"\n  stdout.putStrLn name\nWith this standard input:Lean user\nthe standard output is:Who is it?\nHello, Lean user\n\n\nReplaces the standard input stream of the current thread and returns its previous value.Use IO.getStdin to get the current standard input stream.\n\nRuns an action with the specified stream h as standard input, restoring the original standard\ninput stream afterwards.\n\nReturns the current thread's standard output stream.Use IO.setStdout to replace the current thread's standard output stream.\n\nReplaces the standard output stream of the current thread and returns its previous value.Use IO.getStdout to get the current standard output stream.\n\nRuns an action with the specified stream h as standard output, restoring the original standard\noutput stream afterwards.\n\nReturns the current thread's standard error stream.Use IO.setStderr to replace the current thread's standard error stream.\n\nReplaces the standard error stream of the current thread and returns its previous value.Use IO.getStderr to get the current standard error stream.\n\nRuns an action with the specified stream h as standard error, restoring the original standard\nerror stream afterwards.\n\nRuns an action with stdin emptied and stdout and stderr captured into a String. If\nisolateStderr is false, only stdout is captured.\n\nRedirecting Standard I/O to StringsThe countdown function counts down from a specified number, writing its progress to standard output.\nUsing IO.FS.withIsolatedStreams, this output can be redirected to a string.def countdown : Nat → IO Unit\n  | 0 =>\n    IO.println \"Blastoff!\"\n  | n + 1 => do\n    IO.println s!\"{n + 1}\"\n    countdown n\n\ndef runCountdown : IO String := do\n  let (output, ()) ← IO.FS.withIsolatedStreams (countdown 10)\n  return output\n\n#eval runCountdown\nRunning countdown yields a string that contains the output:\"10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\nBlastoff!\\n\"\n\n\n","context":"Lean Reference\u0009IO\u0009Files, File Handles, and Streams","header":"15.5.5. Standard I/O","id":"/IO/Files___-File-Handles___-and-Streams/#stdio"},"/releases/v4.15.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___15___0-_LPAR_2025-01-04_RPAR_--Server":{"contents":"* #5835 adds auto-completion for the fields of structure instance notation. Specifically, querying the completions via Ctrl+Space in the whitespace of a structure instance notation will now bring up the full list of fields. Whitespace structure completion can be enabled for custom syntax by wrapping the parser for the list of fields in a structInstFields parser.* #5837 fixes an old auto-completion bug where x. would issue\nnonsensical completions when x. could not be elaborated as a dot\ncompletion.* #5996 avoid max heartbeat error in completion* #6031 fixes a regression with go-to-definition and document highlight\nmisbehaving on tactic blocks.* #6246 fixes a performance issue where the Lean language server would\nwalk the full project file tree every time a file was saved, blocking\nthe processing of all other requests and notifications and significantly\nincreasing overall language server latency after saving.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.15.0 (2025-01-04)","header":"Server","id":"/releases/v4.15.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___15___0-_LPAR_2025-01-04_RPAR_--Server"}});