window.docContents[242].resolve({"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Element-Predicates":{"contents":"Checks whether a is an element of as, using == to compare elements.O(|as|). List.elem is a synonym that takes the element before the list.The preferred simp normal form is l.contains a, and when LawfulBEq α is available,\nl.contains a = true ↔ a ∈ l and l.contains a = false ↔ a ∉ l.Examples:* [1, 4, 2, 3, 3, 7].contains 3 = true* List.contains [1, 4, 2, 3, 3, 7] 5 = false\n\nChecks whether a is an element of l, using == to compare elements.O(|l|). List.contains is a synonym that takes the list before the element.The preferred simp normal form is l.contains a. When LawfulBEq α is available,\nl.contains a = true ↔ a ∈ l and l.contains a = false ↔ a ∉ l.Example:* List.elem 3 [1, 4, 2, 3, 3, 7] = true* List.elem 5 [1, 4, 2, 3, 3, 7] = false\n\nReturns true if p returns true for every element of l.O(|l|). Short-circuits upon encountering the first false.Examples:* [a, b, c].all p = (p a && (p b && p c))* [2, 4, 6].all (· % 2 = 0) = true* [2, 4, 5, 6].all (· % 2 = 0) = false\n\nReturns true if the monadic predicate p returns true for every element of l.O(|l|). Short-circuits upon encountering the first false. The elements in l are examined in\norder from left to right.\n\nReturns true if p returns true for any element of l.O(|l|). Short-circuits upon encountering the first true.Examples:* [2, 4, 6].any (· % 2 = 0) = true* [2, 4, 6].any (· % 2 = 1) = false* [2, 4, 5, 6].any (· % 2 = 0) = true* [2, 4, 5, 6].any (· % 2 = 1) = true\n\nReturns true if the monadic predicate p returns true for any element of l.O(|l|). Short-circuits upon encountering the first true. The elements in l are examined in\norder from left to right.\n\nReturns true if every element of bs is the value true.O(|bs|). Short-circuits at the first false value.* [true, true, true].and = true* [true, false, true].and = false* [true, false, false].and = false* [].and = true\n\nReturns true if true is an element of the list bs.O(|bs|). Short-circuits at the first true value.* [true, true, true].or = true* [true, false, true].or = true* [false, false, false].or = false* [false, false, true].or = true* [].or = false\n\n","context":"Lean Reference\u0009Basic Types\u0009Linked Lists\u0009API Reference","header":"19.15.3.13. Element Predicates","id":"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Element-Predicates"},"/Build-Tools-and-Distribution/Managing-Toolchains-with-Elan/#elan-show":{"contents":"The show command displays the current toolchain (as determined by the current directory) and lists all installed toolchains.\n\n\n\nShows the name of the active toolchain and the version of lean.If there are multiple toolchains installed, then they are all listed.\n\nHere is typical output from show in a project with a lean-toolchain file:\n\ninstalled toolchains\n--------------------\n\nleanprover/lean4:nightly-2025-03-25\nleanprover/lean4:v4.17.0  (resolved from default 'stable')\nleanprover/lean4:v4.16.0\nleanprover/lean4:v4.9.0\n\nactive toolchain\n----------------\n\nleanprover/lean4:v4.9.0 (overridden by '/PATH/TO/PROJECT/lean-toolchain')\nLean (version 4.9.0, arm64-apple-darwin23.5.0, commit 8f9843a4a5fe, Release)\n\n\nThe installed toolchains section lists all the toolchains currently available on the system.\nThe active toolchain section identifies the current toolchain and describes how it was selected.\nIn this case, the toolchain was selected due to a lean-toolchain file.\n\n","context":"Lean Reference\u0009Build Tools\u0009Elan\u0009Command-Line Interface","header":"22.2.3.1. Querying Toolchains","id":"/Build-Tools-and-Distribution/Managing-Toolchains-with-Elan/#elan-show"},"/Build-Tools-and-Distribution/Managing-Toolchains-with-Elan/#elan-toolchain":{"contents":"The elan toolchain family of subcommands is used to manage the installed toolchains.\nToolchains are stored in Elan's toolchain directory.\n\nInstalled toolchains can take up substantial disk space.\nElan tracks the Lean projects in which it is invoked, saving a list.\nThis list of projects can be used to determine which toolchains are in active use and automatically delete unused toolchain versions with toolchain gc.\n\n\n\n\n\nLists the currently-installed toolchains. This is a subset of the output of show.\n\n\n\nInstalls the indicated toolchain.\nThe toolchain's name should be an identifier that's suitable for inclusion in a lean-toolchain file.\n\n\n\nUninstalls the indicated toolchain.\nThe toolchain's name should the name of an installed toolchain.\nUse toolchain list to see the installed toolchains with their names.\n\n\n\nCreates a new local toolchain named local-name, using the Lean toolchain found at path.\n\n\n\nThis command is still considered experimental.Determines which of the installed toolchains are in use, offering to delete those that are not.\nAll the installed toolchains are listed, separated into those that are in use and those that are not.A toolchain is classified as “in use” if* it is the default toolchain,* it is registered as an override, or* there is a directory with a lean-toolchain file referencing the toolchain and elan has been used in the directory before.For safety reasons, toolchain gc will not actually delete any toolchains unless the --delete flag is passed.\nThis may be relaxed in the future when the implementation is deemed sufficiently mature.\nThe --json flag causes toolchain gc to emit the list of used and unused toolchains in a JSON format that's suitable for other tools.\n\n","context":"Lean Reference\u0009Build Tools\u0009Elan\u0009Command-Line Interface","header":"22.2.3.3. Managing Installed Toolchains","id":"/Build-Tools-and-Distribution/Managing-Toolchains-with-Elan/#elan-toolchain"}});