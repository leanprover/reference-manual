window.docContents[190].resolve({"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Maps--Iteration":{"contents":"Updates the values of the map by applying the given function to all mappings.\n\nCheck if all elements satisfy the predicate, short-circuiting if a predicate fails.\n\nCheck if any element satisfies the predicate, short-circuiting if a predicate fails.\n\nFolds the given function over the mappings in the map in ascending order.\n\nFolds the given monadic function over the mappings in the map in ascending order.\n\nFolds the given function over the mappings in the map in descending order.\n\nFolds the given monadic function over the mappings in the map in descending order.\n\nSupport for the for loop construct in do blocks. Iteration happens in ascending order.\n\nCarries out a monadic action on each mapping in the tree map in ascending order.\n\n","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Tree-Based Maps","header":"19.18.8.5. Iteration","id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Tree-Based-Maps--Iteration"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--String-Slices--API-Reference--Positions":{"contents":"Given a byte position within a string slice, obtains the smallest valid position that is\nstrictly greater than the given byte position.\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009String Slices\u0009API Reference","header":"19.8.4.12.1.6. Positions","id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--String-Slices--API-Reference--Positions"},"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Command-Line-Interface--Dependency-Management":{"contents":"\n\nUpdates the Lake package manifest (i.e., lake-manifest.json), downloading and upgrading packages as needed.\nFor each new (transitive) Git dependency, the appropriate commit is cloned into a subdirectory of the workspace's package directory.\nNo copy is made of local dependencies.If a set of packages packages is specified, then these dependencies are upgraded to the latest version compatible with the package's configuration (or removed if removed from the configuration).\nIf there are dependencies on multiple versions of the same package, an arbitrary version is selected.A bare update will upgrade all dependencies.\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Command-Line Interface","header":"22.1.2.8. Dependency Management","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Command-Line-Interface--Dependency-Management"},"/releases/v4.1.0/#release-v4___1___0":{"contents":"* The error positioning on missing tokens has been improved. In particular, this should make it easier to spot errors in incomplete tactic proofs.* After elaborating a configuration file, Lake will now cache the configuration to a lakefile.olean. Subsequent runs of Lake will import this OLean instead of elaborating the configuration file. This provides a significant performance improvement (benchmarks indicate that using the OLean cuts Lake's startup time in half), but there are some important details to keep in mind:* Lake will regenerate this OLean after each modification to the lakefile.lean or lean-toolchain. You can also force a reconfigure by passing the new --reconfigure / -R option to lake.* Lake configuration options (i.e., -K) will be fixed at the moment of elaboration. Setting these options when lake is using the cached configuration will have no effect. To change options, run lake with -R / --reconfigure.* The lakefile.olean is a local configuration and should not be committed to Git. Therefore, existing Lake packages need to add it to their .gitignore.* The signature of Lake.buildO has changed, args has been split into weakArgs and traceArgs. traceArgs are included in the input trace and weakArgs are not. See Lake's FFI example for a demonstration of how to adapt to this change.* The signatures of Lean.importModules, Lean.Elab.headerToImports, and Lean.Elab.parseImports* There is now an occs field\nin the configuration object for the rewrite tactic,\nallowing control of which occurrences of a pattern should be rewritten.\nThis was previously a separate argument for Lean.MVarId.rewrite,\nand this has been removed in favour of an additional field of Rewrite.Config.\nIt was not previously accessible from user tactics.\n\n","context":"Lean Reference\u0009Release Notes","header":"Lean 4.1.0 (2023-09-26)","id":"/releases/v4.1.0/#release-v4___1___0"}});