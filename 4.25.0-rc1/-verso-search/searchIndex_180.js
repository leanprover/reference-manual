window.docContents[180].resolve({"/Basic-Propositions/Propositional-Equality/#UIP":{"contents":"Because of definitional proof irrelevance, propositional equality proofs are unique: two mathematical objects cannot be equal in different ways.theorem Eq.unique {α : Sort u}\n    (x y : α)\n    (p1 p2 : x = y) :\n    p1 = p2 := by\n  rfl\nStreicher's axiom K is also a consequence of definitional proof irrelevance, as is its computation rule.\nAxiom K is a principle that's logically equivalent to Eq.unique, implemented as an alternative recursor for propositional equality.def K {α : Sort u}\n    {motive : {x : α} → x = x → Sort v}\n    (d : {x : α} → motive (Eq.refl x))\n    (x : α) (z : x = x) :\n    motive z :=\n  d\n\nexample {α : Sort u} {a : α}\n    {motive : {x : α} → x = x → Sort u}\n    {d : {x : α} → motive (Eq.refl x)}\n    {v : motive (Eq.refl a)} :\n    K (motive := motive) d a rfl = d := by\n  rfl\n\n\n","context":"Lean Reference\u0009Basic Propositions\u0009Propositional Equality","header":"18.4.1. Uniqueness of Equality Proofs","id":"/Basic-Propositions/Propositional-Equality/#UIP"},"/Basic-Types/Finite-Natural-Numbers/#The-Lean-Language-Reference--Basic-Types--Finite-Natural-Numbers--API-Reference--Construction":{"contents":"The greatest value of Fin (n+1), namely n.Examples:* Fin.last 4 = (4 : Fin 5)* (Fin.last 0).val = (0 : Nat)\n\nThe successor, with an increased bound.This differs from adding 1, which instead wraps around.Examples:* (2 : Fin 3).succ = (3 : Fin 4)* (2 : Fin 3) + 1 = (0 : Fin 3)\n\nThe predecessor of a non-zero element of Fin (n+1), with the bound decreased.Examples:* (4 : Fin 8).pred (by decide) = (3 : Fin 7)* (1 : Fin 2).pred (by decide) = (0 : Fin 1)\n\n","context":"Lean Reference\u0009Basic Types\u0009Finite Natural Numbers\u0009API Reference","header":"19.3.3.1. Construction","id":"/Basic-Types/Finite-Natural-Numbers/#The-Lean-Language-Reference--Basic-Types--Finite-Natural-Numbers--API-Reference--Construction"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Hash-Sets--Iteration":{"contents":"Check if all elements satisfy the predicate, short-circuiting if a predicate fails.\n\nCheck if any element satisfies the predicate, short-circuiting if a predicate succeeds.\n\nFolds the given function over the elements of the hash set in some order.\n\nMonadically computes a value by folding the given function over the elements in the hash set in some\norder.\n\nSupport for the for loop construct in do blocks.\n\nCarries out a monadic action on each element in the hash set in some order.\n\n","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Hash Sets","header":"19.18.6.5. Iteration","id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Hash-Sets--Iteration"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Positions--Lookups":{"contents":"Returns the character at the position pos of a string, taking a proof that p is not the\npast-the-end position.This function is overridden with an efficient implementation in runtime code.Examples:* (\"abc\".pos ⟨1⟩ (by decide)).get (by decide) = 'b'* (\"L∃∀N\".pos ⟨1⟩ (by decide)).get (by decide) = '∃'\n\nReturns the character at the position pos of a string, or panics if the position is the\npast-the-end position.This function is overridden with an efficient implementation in runtime code.\n\nReturns the character at the position pos of a string, or none if the position is the\npast-the-end position.This function is overridden with an efficient implementation in runtime code.\n\nReplaces the character at a specified position in a string with a new character.If both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.Examples:* (\"abc\".pos ⟨1⟩ (by decide)).set 'B' (by decide) = \"aBc\"* (\"L∃∀N\".pos ⟨4⟩ (by decide)).set 'X' (by decide) = \"L∃XN\"\n\n\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009Positions","header":"19.8.4.4.2. Lookups","id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--Positions--Lookups"}});