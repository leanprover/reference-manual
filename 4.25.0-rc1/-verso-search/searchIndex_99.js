window.docContents[99].resolve({"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Cancellation-and-Status":{"contents":"Impure tasks should use IO.checkCanceled to react to cancellation, which occurs either as a result of IO.cancel or when the last reference to the task is dropped.\nPure tasks are terminated automatically upon cancellation.\n\nRequests cooperative cancellation of the task. The task must explicitly call IO.checkCanceled to\nreact to the cancellation.\n\nChecks whether the current task's cancellation flag has been set by calling IO.cancel or by\ndropping the last reference to the task.\n\nChecks whether the task has finished execution, at which point calling Task.get will return\nimmediately.\n\nReturns the current state of a task in the Lean runtime's task manager.For tasks derived from Promises, the states waiting and running should be considered\nequivalent.\n\nThe current state of a Task in the Lean runtime's task manager.The Task is waiting to be run.It can be waiting for dependencies to complete or sitting in the task manager queue waiting for a\nthread to run on.The Task is actively running on a thread or, in the case of a Promise, waiting for a call to\nIO.Promise.resolve.The Task has finished running and its result is available. Calling Task.get or IO.wait on\nthe task will not block.\n\nReturns the thread ID of the calling thread.\n\n","context":"Lean Reference\u0009IO\u0009Tasks and Threads","header":"15.11.4. Cancellation and Status","id":"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Cancellation-and-Status"},"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Compiler":{"contents":"* #6311 adds support for HEq to the new code generator.* #6348 adds support for Float32 to the Lean runtime.* #6350 adds missing features and fixes bugs in the Float32 support* #6383 ensures the new code generator produces code for opaque\ndefinitions that are not tagged as @[extern].\nRemark: This is the behavior of the old code generator.* #6405 adds support for erasure of Decidable.decide to the new code\ngenerator. It also adds a new Probe.runOnDeclsNamed function, which is\nhelpful for writing targeted single-file tests of compiler internals.* #6415 fixes a bug in the sharecommon module, which was returning\nincorrect results for objects that had already been processed by\nsharecommon. See the new test for an example that triggered the bug.* #6429 adds support for extern LCNF decls, which is required for parity\nwith the existing code generator.* #6535 avoids a linker warning on Windows.* #6547 should prevent Lake from accidentally picking up other linkers\ninstalled on the machine.* #6574 actually prevents Lake from accidentally picking up other\ntoolchains installed on the machine.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.16.0 (2025-02-03)","header":"Compiler","id":"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Compiler"}});