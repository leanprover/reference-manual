window.docContents[171].resolve({"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--API-Reference--Conversions--To-and-From-Finite-Numbers":{"contents":"Converts a USize into the corresponding Fin USize.size.\n\nConverts a UInt8 into the corresponding Fin UInt8.size.\n\nConverts a UInt16 into the corresponding Fin UInt16.size.\n\nConverts a UInt32 into the corresponding Fin UInt32.size.\n\nConverts a UInt64 into the corresponding Fin UInt64.size.\n\nConverts a Fin USize.size into the corresponding USize.\n\nConverts a Fin UInt8.size into the corresponding UInt8.\n\nConverts a Fin UInt16.size into the corresponding UInt16.\n\nConverts a Fin UInt32.size into the corresponding UInt32.\n\nConverts a Fin UInt64.size into the corresponding UInt64.\n\nConverts a word-sized unsigned integer into a decimal string.This function is overridden at runtime with an efficient implementation.Examples:* USize.repr 0 = \"0\"* USize.repr 28 = \"28\"* USize.repr 307 = \"307\"\n\n","context":"Lean Reference\u0009Basic Types\u0009Fixed-Precision Integers\u0009API Reference\u0009Conversions","header":"19.4.4.3.6. To and From Finite Numbers","id":"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--API-Reference--Conversions--To-and-From-Finite-Numbers"},"/The--grind--tactic/Algebraic-Solver-_LPAR_Commutative-Rings___-Fields_RPAR_/#grind-ring-classes":{"contents":"Users can enable the ring solver for their own types by providing instances of the following type classes, all in the Lean.Grind namespace:* Semiring* Ring* CommSemiring* CommRing* IsCharP* AddRightCancel* NoNatZeroDivisors* FieldThe algebraic solvers will self-configure depending on the availability of these instances, so not all need to be provided.\nThe capabilities of the algebraic solvers will, of course, degrade when some are not available.\n\nThe Lean standard library contains the applicable instances for the types defined in the standard library.\nBy providing these instances, other libraries can also enable grind's ring solver.\nFor example, the Mathlib CommRing type class implements Lean.Grind.CommRing to ensure the ring solver works out-of-the-box.\n\n\n\n\n\n\n\n","context":"Lean Reference\u0009The  grind  tactic\u0009Algebraic Solver (Commutative Rings, Fields)","header":"17.8.1. Solver Type Classes","id":"/The--grind--tactic/Algebraic-Solver-_LPAR_Commutative-Rings___-Fields_RPAR_/#grind-ring-classes"},"/releases/v4.23.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___23___0-_LPAR_2025-09-15_RPAR_--Lake":{"contents":"* #9053 updates Lake to resolve the .olean files for transitive\nimports for Lean through the modules field of lean --setup. This\nenables means the Lean can now directly use the .olean files from the\nLake cache without needed to locate them at a specific hierarchical\npath.* #9101 fixes a bug introduce by #9081 where the source file was dropped\nfrom the module input trace and some entries were dropped from the\nmodule job log.* #9162 changes the key Lake uses for the ,ir artifact in the content\nhash data structure to r, maintaining the convention of single\ncharacter key names.* #9165 fixes two issues with Lake's process of creating static\narchives.* #9332 changes the dependency cloning mechanism in lake so the log\nmessage that lake is cloning a\ndependency occurs before it is finished doing so (and instead before it\nstarts). This has been a\nhuge source of confusion for users that don't understand why lake seems\nto be just stuck for no\nreason when setting up a new project, the output now is:Î» lake +lean4 new math math\ninfo: downloading mathlib `lean-toolchain` file\ninfo: math: no previous manifest, creating one from scratch\ninfo: leanprover-community/mathlib: cloning https://github.com/leanprover-community/mathlib4\n<hang>\ninfo: leanprover-community/mathlib: checking out revision 'cd11c28c6a0d514a41dd7be9a862a9c8815f8599'\n* #9434 changes the Lake local cache infrastructure to restore\nexecutables and shared and static libraries from the cache. This means\nthey keep their expected names, which some use cases still rely on.* #9435 adds the libPrefixOnWindows package and library configuration\noption. When enabled, Lake will prefix static and shared libraries with\nlib on Windows (i.e., the same way it does on Unix).* #9436 adds the number of jobs run to the final message Lake produces\non a successfully run of lake build.* #9478 adds proper Lake support for meta import. Module IR is now\ntracked in traces and in the pre-resolved modules Lake passes to lean --setup.* #9525 fixes Lake's handling of a module system import all.\nPreviously, Lake treated import all the same a non-module import,\nimporting all private data in the transitive import tree. Lake now\ndistinguishes the two, with import all M just importing the private\ndata of M. The direct private imports of M are followed, but they\nare not promoted.* #9559 changes lake setup-file to use the server-provided header for\nworkspace modules.* #9604 restricts Lake's production of thin archives to only the Windows\ncore build (i.e., bootstrap = true). The unbundled ar usually used\nfor core builds on macOS does not support --thin, so we avoid using it\nunless necessary.* #9677 adds build times to each build step of the build monitor (under\n-v or in CI) and delays exiting on a --no-build until after the\nbuild monitor finishes. Thus, a --no-build failure will now report\nwhich targets blocked Lake by needing a rebuild.* #9697 fixes the handling in lake lean and lake setup-file of a\nlibrary source file with multiple dots (e.g., src/Foo.Bar.lean).* #9698 adjusts the formatting type classes for lake query to no\nlonger require both a text and JSON form and instead work with any\ncombination of the two. The classes have also been renamed. In addition,\nthe query formatting of a text module header has been improved to only\nproduce valid headers.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.23.0 (2025-09-15)","header":"Lake","id":"/releases/v4.23.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___23___0-_LPAR_2025-09-15_RPAR_--Lake"}});