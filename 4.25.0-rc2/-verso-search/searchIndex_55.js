window.docContents[55].resolve({"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Task-Results":{"contents":"Blocks the current thread until the given task has finished execution, and then returns the result\nof the task. If the current thread is itself executing a (non-dedicated) task, the maximum\nthreadpool size is temporarily increased by one while waiting so as to ensure the process cannot\nbe deadlocked by threadpool starvation. Note that when the current thread is unblocked, more tasks\nthan the configured threadpool size may temporarily be running at the same time until sufficiently\nmany tasks have finished.Task.map and Task.bind should be preferred over Task.get for setting up task dependencies\nwhere possible as they do not require temporarily growing the threadpool in this way. In\nparticular, calling Task.get in a task continuation with (sync := true) will panic as the\ncontinuation is decidedly not \"cheap\" in this case and deadlocks may otherwise occur. The\nwaited-upon task should instead be returned and unwrapped using Task.bind/IO.bindTask.\n\nWaits for the task to finish, then returns its result.\n\nWaits until any of the tasks in the list has finished, then return its result.\n\n","context":"Lean Reference\u0009IO\u0009Tasks and Threads","header":"15.11.2. Task Results","id":"/IO/Tasks-and-Threads/#The-Lean-Language-Reference--IO--Tasks-and-Threads--Task-Results"},"/Run-Time-Code/Boxing/#boxing":{"contents":"Lean values may be represented at runtime in two ways:* Boxed values may be pointers to heap values or require shifting and masking.* Unboxed values are immediately available.\n\nBoxed values are either a pointer to an object, in which case the lowest-order bit is 0, or an immediate value, in which case the lowest-order bit is 1 and the value is found by shifting the representation to the right by one bit.\n\nTypes with an unboxed representation, such as UInt8 and enum inductive types, are represented as the corresponding C types in contexts where the compiler can be sure that the value has said type.\nIn some contexts, such as generic container types like Array, otherwise-unboxed values must be boxed prior to storage.\nIn other words, Bool.not is called with and returns unboxed uint8_t values because the enum inductive type Bool has an unboxed representation, but the individual Bool values in an Array Bool are boxed.\nA field of type Bool in an inductive type's constructor is represented unboxed, while Bools stored in polymorphic fields that are instantiated as Bool are boxed.\n\n","context":"Lean Reference\u0009Run-Time Code","header":"21.1. Boxing","id":"/Run-Time-Code/Boxing/#boxing"}});