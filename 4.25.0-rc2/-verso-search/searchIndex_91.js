window.docContents[91].resolve({"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Script-API-Reference--Accessing-the-Environment":{"contents":"Monads that provide access to information about the current Lake environment (such as the locations of Lean, Lake, and other tools) have MonadLakeEnv instances.\nThis is true for all of the monads in the Lake API, including ScriptM.\n\nA monad equipped with a (read-only) detected environment for Lake.\n\nGets the current Lake environment.\n\nGet the LAKE_NO_CACHE/--no-cache Lake configuration.\n\nGet whether the LAKE_NO_CACHE/--no-cache Lake configuration is NOT set.\n\nGet the LAKE_PACKAGE_URL_MAP for the Lake environment. Empty if none.\n\nGet the name of Elan toolchain for the Lake environment. Empty if none.\n\n\n\n\n\n\n\n\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Script API Reference","header":"22.1.4.1. Accessing the Environment","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Script-API-Reference--Accessing-the-Environment"},"/Tactic-Proofs/Targeted-Rewriting-with--conv/#conv-simp":{"contents":"simp [thm] performs simplification using thm and marked @[simp] lemmas.\nSee the simp tactic for more information.\n\ndsimp is the definitional simplifier in conv-mode. It differs from simp in that it only\napplies theorems that hold by reflexivity.Examples:example (a : Nat): (0 + 0) = a - a := by\n  conv =>\n    lhs\n    dsimp\n    rw [← Nat.sub_self a]\n\n\nsimp_match simplifies match expressions. For example,match [a, b] with\n| [] => 0\n| hd :: tl => hd\nsimplifies to a.\n\n","context":"Lean Reference\u0009Tactic Proofs\u0009Targeted Rewriting with  conv\u0009Changing the Goal","header":"13.6.4.2. Simplification","id":"/Tactic-Proofs/Targeted-Rewriting-with--conv/#conv-simp"},"/The-Module-System/Visibility/#The-Lean-Language-Reference--The-Module-System--Visibility":{"contents":"The main distinction the module system introduces is between the public scope that contains all information visible to other modules via import and the private scope that is not imported by default.\nBoth declarations and imports themselves are scoped in this way.\n\nThe default scope is private.\nThe new modifier public before a declaration or import puts it into the public scope instead.\nNo information from the private scope can be used in the public scope to ensure information in the latter still makes sense when only it is imported into other modules.\n\n\n\nmodule\n\ndef priv : Nat := 0\n\npublic abbrev pub : Nat := priv  -- error: Unknown identifier `priv`\n\n\npublic section can be used to switch the default scope for declarations, with private locally negating it.\nThis is mostly intended to ease porting while avoiding merge conflicts.\n\nMarking a declaration as public at minimum makes its \"signature\", i.e. its name and type, visible.\nSome specific declarations/terms may still put other parts in the private scope as follows:\n\n* by used in the public scope to prove a proposition puts the resulting proof in the private scope (by wrapping it in a public helper theorem).* def puts its body in the private scope by default. The defined constant cannot be unfolded when used in the public scope.\nThis can be changed with the @[expose] attribute.\n@[expose] section can be used to apply the attribute to all defs in the section and can locally be negated by @[no_expose].* theorem and opaque never expose their body.\nConsider using @[expose] def instead if exposition is absolutely necessary.* abbrev and instance always expose their body.\nFor instance, individual field values can be marked private, which can be useful for programming purposes.\nFor proof fields, by already does the trick.\n\nmodule\n\ndef myInternalHelper (x : Nat) : String := ...\n\npublic instance : ToString Nat where\n  toString x := private myInternalHelper x\n\n\n\n\n","context":"Lean Reference\u0009The Module System","header":"Visibility","id":"/The-Module-System/Visibility/#The-Lean-Language-Reference--The-Module-System--Visibility"}});