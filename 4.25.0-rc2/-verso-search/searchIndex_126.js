window.docContents[126].resolve({"/Basic-Types/Byte-Arrays/#The-Lean-Language-Reference--Basic-Types--Byte-Arrays--API-Reference--Conversions--UTF-8":{"contents":"Decodes a sequence of characters from their UTF-8 representation. Returns none if the bytes are\nnot a sequence of Unicode scalar values.\n\nDecodes and returns the Char whose UTF-8 encoding begins at i in bytes.Returns none if i is not the start of a valid UTF-8 encoding of a character.\n\nDecodes and returns the Char whose UTF-8 encoding begins at i in bytes.This function requires a proof that there is, in fact, a valid Char at i. utf8DecodeChar? is\nan alternative function that returns Option Char instead of requiring a proof ahead of time.\n\n","context":"Lean Reference\u0009Basic Types\u0009Byte Arrays\u0009API Reference\u0009Conversions","header":"19.17.1.4.1. UTF-8","id":"/Basic-Types/Byte-Arrays/#The-Lean-Language-Reference--Basic-Types--Byte-Arrays--API-Reference--Conversions--UTF-8"},"/The-Type-System/Functions/#currying":{"contents":"In Lean's core type theory, every function maps each element of the domain to a single element of the codomain.\nIn other words, every function expects exactly one parameter.\nMultiple-parameter functions are implemented by defining higher-order functions that, when supplied with the first parameter, return a new function that expects the remaining parameters.\nThis encoding is called currying, popularized by and named after Haskell B. Curry.\nLean's syntax for defining functions, specifying their types, and applying them creates the illusion of multiple-parameter functions, but the result of elaboration contains only single-parameter functions.\n\n","context":"Lean Reference\u0009Type System\u0009Functions","header":"4.1.2. Currying","id":"/The-Type-System/Functions/#currying"},"/releases/v4.21.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___21___0-_LPAR_2025-06-30_RPAR_--Documentation":{"contents":"* #8199 adds a style guide for documentation, including both general\nprinciples and docstring-specific concerns.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.21.0 (2025-06-30)","header":"Documentation","id":"/releases/v4.21.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___21___0-_LPAR_2025-06-30_RPAR_--Documentation"}});