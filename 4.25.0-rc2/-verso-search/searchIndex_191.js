window.docContents[191].resolve({"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--Logical-Model--Unsigned":{"contents":"Unsigned integers that are the size of a word on the platform's architecture.On a 32-bit architecture, USize is equivalent to UInt32. On a 64-bit machine, it is equivalent\nto UInt64.Creates a USize from a BitVec System.Platform.numBits. This function is overridden with a\nnative implementation.Unpacks a USize into a BitVec System.Platform.numBits. This function is overridden with a native\nimplementation.\n\nUnsigned 8-bit integers.This type has special support in the compiler so it can be represented by an unboxed 8-bit value\nrather than wrapping a BitVec 8.Creates a UInt8 from a BitVec 8. This function is overridden with a native implementation.Unpacks a UInt8 into a BitVec 8. This function is overridden with a native implementation.\n\nUnsigned 16-bit integers.This type has special support in the compiler so it can be represented by an unboxed 16-bit value\nrather than wrapping a BitVec 16.Creates a UInt16 from a BitVec 16. This function is overridden with a native implementation.Unpacks a UInt16 into a BitVec 16. This function is overridden with a native implementation.\n\nUnsigned 32-bit integers.This type has special support in the compiler so it can be represented by an unboxed 32-bit value\nrather than wrapping a BitVec 32.Creates a UInt32 from a BitVec 32. This function is overridden with a native implementation.Unpacks a UInt32 into a BitVec 32. This function is overridden with a native implementation.\n\nUnsigned 64-bit integers.This type has special support in the compiler so it can be represented by an unboxed 64-bit value\nrather than wrapping a BitVec 64.Creates a UInt64 from a BitVec 64. This function is overridden with a native implementation.Unpacks a UInt64 into a BitVec 64. This function is overridden with a native implementation.\n\n","context":"Lean Reference\u0009Basic Types\u0009Fixed-Precision Integers\u0009Logical Model","header":"19.4.1.1. Unsigned","id":"/Basic-Types/Fixed-Precision-Integers/#The-Lean-Language-Reference--Basic-Types--Fixed-Precision-Integers--Logical-Model--Unsigned"}});