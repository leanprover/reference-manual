window.docContents[89].resolve({"/Basic-Types/Arrays/#The-Lean-Language-Reference--Basic-Types--Arrays--API-Reference--Filtering":{"contents":"Returns the array of elements in as for which p returns true.Only elements from start (inclusive) to stop (exclusive) are considered. Elements outside that\nrange are discarded. By default, the entire array is considered.Examples:* #[1, 2, 5, 2, 7, 7].filter (· > 2) = #[5, 7, 7]* #[1, 2, 5, 2, 7, 7].filter (fun _ => false) = #[]* #[1, 2, 5, 2, 7, 7].filter (fun _ => true) = #[1, 2, 5, 2, 7, 7]* #[1, 2, 5, 2, 7, 7].filter (· > 2) (start := 3) = #[7, 7]* #[1, 2, 5, 2, 7, 7].filter (fun _ => true) (start := 3) = #[2, 7, 7]* #[1, 2, 5, 2, 7, 7].filter (fun _ => true) (stop := 3) = #[1, 2, 5]\n\nApplies the monadic predicate p to every element in the array, in order from left to right, and\nreturns the array of elements for which p returns true.Only elements from start (inclusive) to stop (exclusive) are considered. Elements outside that\nrange are discarded. By default, the entire array is checked.Example:#eval #[1, 2, 5, 2, 7, 7].filterM fun x => do\n  IO.println s!\"Checking {x}\"\n  return x < 3\nChecking 1\nChecking 2\nChecking 5\nChecking 2\nChecking 7\nChecking 7\n#[1, 2, 2]\n\n\nApplies the monadic predicate p on every element in the array in reverse order, from right to\nleft, and returns those elements for which p returns true. The elements of the returned list are\nin the same order as in the input list.Only elements from start (exclusive) to stop (inclusive) are considered. Elements outside that\nrange are discarded. Because the array is examined in reverse order, elements are only examined when\nstart > stop. By default, the entire array is considered.Example:#eval #[1, 2, 5, 2, 7, 7].filterRevM fun x => do\n  IO.println s!\"Checking {x}\"\n  return x < 3\nChecking 7\nChecking 7\nChecking 2\nChecking 5\nChecking 2\nChecking 1\n#[1, 2, 2]\n\n\nApplies a function that returns an Option to each element of an array, collecting the non-none\nvalues.Example:#eval #[1, 2, 5, 2, 7, 7].filterMap fun x =>\n  if x > 2 then some (2 * x) else none\n#[10, 14, 14]\n\n\nApplies a monadic function that returns an Option to each element of an array, collecting the\nnon-none values.Only elements from start (inclusive) to stop (exclusive) are considered. Elements outside that\nrange are discarded. By default, the entire array is considered.Example:#eval #[1, 2, 5, 2, 7, 7].filterMapM fun x => do\n  IO.println s!\"Examining {x}\"\n  if x > 2 then return some (2 * x)\n  else return none\nExamining 1\nExamining 2\nExamining 5\nExamining 2\nExamining 7\nExamining 7\n#[10, 14, 14]\n\n\nFilters an array of syntax, treating every other element as a separator rather than an element to\ntest with the predicate p. The resulting array contains the tested elements for which p returns\ntrue, separated by the corresponding separator elements.\n\nFilters an array of syntax, treating every other element as a separator rather than an element to\ntest with the monadic predicate p. The resulting array contains the tested elements for which p\nreturns true, separated by the corresponding separator elements.\n\n","context":"Lean Reference\u0009Basic Types\u0009Arrays\u0009API Reference","header":"19.16.4.10. Filtering","id":"/Basic-Types/Arrays/#The-Lean-Language-Reference--Basic-Types--Arrays--API-Reference--Filtering"},"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Length":{"contents":"The length of a list.This function is overridden in the compiler to lengthTR, which uses constant stack space.Examples:* ([] : List String).length = 0* [\"green\", \"brown\"].length = 2\n\nThe length of a list.This is a tail-recursive version of List.length, used to implement List.length without running\nout of stack space.Examples:* ([] : List String).lengthTR = 0* [\"green\", \"brown\"].lengthTR = 2\n\nChecks whether a list is empty.O(1).Examples:* [].isEmpty = true* [\"grape\"].isEmpty = false* [\"apple\", \"banana\"].isEmpty = false\n\n","context":"Lean Reference\u0009Basic Types\u0009Linked Lists\u0009API Reference","header":"19.15.3.3. Length","id":"/Basic-Types/Linked-Lists/#The-Lean-Language-Reference--Basic-Types--Linked-Lists--API-Reference--Length"},"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Library-Design--Fused-Operations":{"contents":"It is common to modify a table based on its pre-existing contents.\nTo avoid having to traverse a data structure twice, many query/modification pairs are provided in “fused” variants that perform a query while modifying a map or set.\nIn some cases, the result of the query affects the modification.\n\nFor example, Std.HashMap provides containsThenInsert, which inserts a key-value pair into a map while signalling whether it was previously found, and containsThenInsertIfNew, which inserts the new mapping only if it was not previously present.\nThe alter function modifies the value for a given key without having to search for the key multiple times; the alternation is performed by a function in which missing values are represented by none.\n\n","context":"Lean Reference\u0009Basic Types\u0009Maps and Sets\u0009Library Design","header":"19.18.1.1. Fused Operations","id":"/Basic-Types/Maps-and-Sets/#The-Lean-Language-Reference--Basic-Types--Maps-and-Sets--Library-Design--Fused-Operations"},"/Basic-Types/Strings/#raw-string-literals":{"contents":"In raw string literals,  there are no escape sequences or gaps, and each character denotes itself exactly.\nRaw string literals are preceded by r, followed by zero or more hash characters (#) and a double quote \".\nThe string literal is completed at a double quote that is followed by the same number of hash characters.\nFor example, they can be used to avoid the need to double-escape certain characters:\n\nexample : r\"\\t\" = \"\\\\t\" := rfl\n#eval r\"Write backslash in a string using '\\\\\\\\'\"\n\n\nThe #eval yields:\n\n\"Write backslash in a string using '\\\\\\\\\\\\\\\\'\"\n\n\nIncluding hash marks allows the strings to contain unescaped quotes:\n\nexample :\n    r#\"This is \"literally\" quoted\"# =\n    \"This is \\\"literally\\\" quoted\" :=\n  rfl\n\n\nAdding sufficiently many hash marks allows any raw literal to be written literally:\n\nexample :\n    r##\"This is r#\"literally\"# quoted\"## =\n    \"This is r#\\\"literally\\\"# quoted\" :=\n  rfl\n\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009Syntax","header":"19.8.3.3. Raw String Literals","id":"/Basic-Types/Strings/#raw-string-literals"},"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Concepts-and-Terminology--GitHub-Release-Builds--Downloading":{"contents":"To download artifacts, one should configure the package options releaseRepo and buildArchive to point to the GitHub repository hosting the release and the correct artifact name within it (if the defaults are not sufficient).\nThen, set preferReleaseBuild := true to tell Lake to fetch and unpack it as an extra package dependency.\n\nLake will only fetch release builds as part of its standard build process if the package wanting it is a dependency (as the root package is expected to modified and thus not often compatible with this scheme).\nHowever, should one wish to fetch a release for a root package (e.g., after cloning the release's source but before editing), one can manually do so via lake build :release.\n\nLake internally uses curl to download the release and tar to unpack it, so the end user must have both tools installed in order to use this feature.\nIf Lake fails to fetch a release for any reason, it will move on to building from the source.\nThis mechanism is not technically limited to GitHub: any Git host that uses the same URL scheme works as well.\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Concepts and Terminology\u0009GitHub Release Builds","header":"22.1.1.5.1. Downloading","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Concepts-and-Terminology--GitHub-Release-Builds--Downloading"}});