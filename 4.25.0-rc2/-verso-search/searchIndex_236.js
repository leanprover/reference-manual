window.docContents[236].resolve({"/Basic-Types/Integers/#The-Lean-Language-Reference--Basic-Types--Integers--API-Reference--Conversions":{"contents":"The absolute value of an integer is its distance from 0.This function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.Examples:* (7 : Int).natAbs = 7* (0 : Int).natAbs = 0* ((-11 : Int).natAbs = 11\n\nConverts an integer into a natural number. Negative numbers are converted to 0.Examples:* (7 : Int).toNat = 7* (0 : Int).toNat = 0* (-7 : Int).toNat = 0\n\nConverts an integer into a natural number. Returns none for negative numbers.Examples:* (7 : Int).toNat? = some 7* (0 : Int).toNat? = some 0* (-7 : Int).toNat? = none\n\nConverts an arbitrary-precision integer to a word-sized signed integer, wrapping around on over- or\nunderflow.This function is overridden at runtime with an efficient implementation.\n\nConverts an arbitrary-precision integer to an 8-bit integer, wrapping on overflow or underflow.Examples:* Int.toInt8 48 = 48* Int.toInt8 (-115) = -115* Int.toInt8 (-129) = 127* Int.toInt8 (128) = -128\n\nConverts an arbitrary-precision integer to a 16-bit integer, wrapping on overflow or underflow.Examples:* Int.toInt16 48 = 48* Int.toInt16 (-129) = -129* Int.toInt16 (128) = 128* Int.toInt16 70000 = 4464* Int.toInt16 (-40000) = 25536\n\nConverts an arbitrary-precision integer to a 32-bit integer, wrapping on overflow or underflow.Examples:* Int.toInt32 48 = 48* Int.toInt32 (-129) = -129* Int.toInt32 70000 = 70000* Int.toInt32 (-40000) = -40000* Int.toInt32 2147483648 = -2147483648* Int.toInt32 (-2147483649) = 2147483647\n\nConverts an arbitrary-precision integer to a 64-bit integer, wrapping on overflow or underflow.This function is overridden at runtime with an efficient implementation.Examples:* Int.toInt64 48 = 48* Int.toInt64 (-40_000) = -40_000* Int.toInt64 2_147_483_648 = 2_147_483_648* Int.toInt64 (-2_147_483_649) = -2_147_483_649* Int.toInt64 9_223_372_036_854_775_808 = -9_223_372_036_854_775_808* Int.toInt64 (-9_223_372_036_854_775_809) = 9_223_372_036_854_775_807\n\nReturns the decimal string representation of an integer.\n\n","context":"Lean Reference\u0009Basic Types\u0009Integers\u0009API Reference","header":"19.2.4.2. Conversions","id":"/Basic-Types/Integers/#The-Lean-Language-Reference--Basic-Types--Integers--API-Reference--Conversions"},"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Declarative-TOML-Format--Package-Configuration":{"contents":"The top-level contents of lakefile.toml specify the options that apply to the package itself, including metadata such as the name and version, the locations of the files in the workspace, compiler flags to be used for all targets, and\nThe only mandatory field is name, which declares the package's name.\n\nA Package's declarative configuration.These options describe the package.\nThey are used by Reservoir to index and display packages.\nIf a field is left out, Reservoir may use information from the package's GitHub repository to fill in details.The package's name.These options control the top-level directory layout of the package and its build directory.\nFurther paths specified by libraries, executables, and targets within the package are relative to these directories.These options configure how code is built and run in the package.\nLibraries, executables, and other targets within a package can further add to parts of this configuration.The CLI commands test and lint use definitions configured by the workspace's root package to perform testing and linting.\nThe code that is run to perform tests and lits are referred to as the test or lint driver.\nIn Lean configuration files, these can be specified by applying the @[test_driver] or @[lint_driver] attributes to a Lake script or an executable or library target.\nIn both Lean and TOML configuration files, they can also be configured by setting these options.\nA target or script TGT from a dependency PKG can be specified as a test or lint driver using the string \"PKG/TGT\"These options define a cloud release for the package, as described in the section on GitHub release builds.The names of the package's targets to build by default\n(i.e., on a bare lake build of the package).For internal use. Whether this package is Lean itself.An Array of target names to build whenever the package is used.Whether to compile each of the package's module into a native shared library\nthat is loaded whenever the module is imported. This speeds up evaluation of\nmetaprograms and enables the interpreter to run functions marked @[extern].Defaults to false.Additional arguments to pass to the Lean language server\n(i.e., lean --server) launched by lake serve, both for this package and\nalso for any packages browsed from this one in the same session.The directory containing the package's Lean source files.\nDefaults to the package's directory.(This will be passed to lean as the -R option.)The directory to which Lake should output the package's build results.\nDefaults to defaultBuildDir (i.e., .lake/build).The build subdirectory to which Lake should output the package's\nbinary Lean libraries (e.g., .olean, .ilean files).\nDefaults to  defaultLeanLibDir (i.e., lib).The build subdirectory to which Lake should output the package's\nnative libraries (e.g., .a, .so, .dll files).\nDefaults to defaultNativeLibDir (i.e., lib).The build subdirectory to which Lake should output the package's binary executable.\nDefaults to defaultBinDir (i.e., bin).The build subdirectory to which Lake should output\nthe package's intermediary results (e.g., .c and .o files).\nDefaults to defaultIrDir (i.e., ir).The URL of the GitHub repository to upload and download releases of this package.\nIf none (the default), for downloads, Lake uses the URL the package was download\nfrom (if it is a dependency) and for uploads, uses gh's default.A custom name for the build archive for the GitHub cloud release.\nIf none (the default), Lake defaults to {(pkg-)name}-{System.Platform.target}.tar.gz.Whether to prefer downloading a prebuilt release (from GitHub) rather than\nbuilding this package from the source when this package is used as a dependency.The name of the script, executable, or library by lake test when\nthis package is the workspace root. To point to a definition in another\npackage, use the syntax <pkg>/<def>.A script driver will be run by lake test with the arguments\nconfigured in testDriverArgs  followed by any specified on the CLI\n(e.g., via  lake lint -- <args>...). An executable driver will be built\nand then run like a script. A library will just be built.Arguments to pass to the package's test driver.\nThese arguments will come before those passed on the command line via\nlake test -- <args>....The name of the script or executable used by lake lint when this package\nis the workspace root. To point to a definition in another package, use the\nsyntax <pkg>/<def>.A script driver will be run by lake lint with the arguments\nconfigured in lintDriverArgs followed by any specified on the CLI\n(e.g., via  lake lint -- <args>...). An executable driver will be built\nand then run like a script.Arguments to pass to the package's linter.\nThese arguments will come before those passed on the command line via\nlake lint -- <args>....The package version. Versions have the form:v!\"<major>.<minor>.<patch>[-<specialDescr>]\"\nA version with a - suffix is considered a \"prerelease\".Lake suggest the following guidelines for incrementing versions:* Major version increment (e.g., v1.3.0 → v2.0.0)\nIndicates significant breaking changes in the package.\nPackage users are not expected to update to the new version\nwithout manual intervention.* Minor version increment (e.g., v1.3.0 → v1.4.0)\nDenotes notable changes that are expected to be\ngenerally backwards compatible.\nPackage users are expected to update to this version automatically\nand should be able to fix any breakages and/or warnings easily.* Patch version increment (e.g., v1.3.0 → v1.3.1)\nReserved for bug fixes and small touchups.\nPackage users are expected to update automatically and should not expect\nsignificant breakage, except in the edge case of users relying on the\nbehavior of patched bugs.Note that backwards-incompatible changes may occur at any version increment.\nThe is because the current nature of Lean (e.g., transitive imports,\nrich metaprogramming, reducibility in proofs), makes it infeasible to\ndefine a completely stable interface for a package.\nInstead, the different version levels indicate a change's intended significance\nand how difficult migration is expected to be.Versions of form the 0.x.x are considered development versions prior to\nfirst official release. Like prerelease, they are not expected to closely\nfollow the above guidelines.Packages without a defined version default to 0.0.0.Git tags of this package's repository that should be treated as versions.\nPackage indices (e.g., Reservoir) can make use of this information to determine\nthe Git revisions corresponding to released versions.Defaults to tags that are \"version-like\".\nThat is, start with a v followed by a digit.A short description for the package (e.g., for Reservoir).Custom keywords associated with the package.\nReservoir can make use of a package's keywords to group related packages\ntogether and make it easier for users to discover them.Good keywords include the domain (e.g., math, software-verification,\ndevtool), specific subtopics (e.g., topology,  cryptology), and\nsignificant implementation details (e.g., dsl, ffi, cli).\nFor instance, Lake's keywords could be devtool, cli, dsl,\npackage-manager, and build-system.A URL to information about the package.Reservoir will already include a link to the package's GitHub repository\n(if the package is sourced from there). Thus, users are advised to specify\nsomething else for this (if anything).The package's license (if one).\nShould be a valid SPDX License Expression.Reservoir requires that packages uses an OSI-approved license to be\nincluded in its index, and currently only supports single identifier\nSPDX expressions. For, a list of OSI-approved SPDX license identifiers,\nsee the SPDX LIcense List.Files containing licensing information for the package.These should be the license files that users are expected to include when\ndistributing package sources, which may be more then one file for some licenses.\nFor example, the Apache 2.0 license requires the reproduction of a NOTICE\nfile along with the license (if such a file exists).Defaults to #[\"LICENSE\"].The path to the package's README.A README should be a Markdown file containing an overview of the package.\nReservoir displays the rendered HTML of this file on a package's page.\nA nonstandard location can be used to provide a different README for Reservoir\nand GitHub.Defaults to README.md.Whether Reservoir should include the package in its index.\nWhen set to false, Reservoir will not add the package to its index\nand will remove it if it was already there (when Reservoir is next updated).Whether to enables Lake's local, offline artifact cache for the package.Artifacts (i.e., build products) of packages will be shared across\nlocal copies by storing them in a cache associated with the Lean toolchain.\nThis can significantly reduce initial build times and disk space usage when\nworking with multiple copies of large projects or large dependencies.As a caveat, build targets which support the artifact cache will not be stored\nin their usual location within the build directory. Thus, projects with custom build\nscripts that rely on specific location of artifacts may wish to disable this feature.If none (the default), the cache will be disabled by default unless\nthe LAKE_ARTIFACT_CACHE environment variable is set to true.Whether, when the local artifact cache is enabled, Lake should copy all cached\nartifacts into the build directory. This ensures the build results are available\nto external consumers who expect them in the build directory.Defaults to false.Whether native libraries (of this package) should be prefixed with lib on Windows.Unlike Unix, Windows does not require native libraries to start with lib and,\nby convention, they usually do not. However, for consistent naming across all platforms,\nusers may wish to enable this.Defaults to false.Whether downstream packages can import all modules of this package.If enabled, downstream users will be able to access the private internals of modules,\nincluding definition bodies not marked as @[expose].\nThis may also, in the future, prevent compiler optimization which rely on private\ndefinitions being inaccessible outside their own package.Defaults to false.The directory to which Lake should download remote dependencies.\nDefaults to defaultPackagesDir (i.e., .lake/packages).The mode in which the modules should be built (e.g., debug, release).\nDefaults to release.An Array of additional options to pass to both the Lean language server\n(i.e., lean --server) launched by lake serve and to lean when compiling\na module's Lean source files.Additional arguments to pass to lean\nwhen compiling a module's Lean source files.Additional arguments to pass to lean\nwhen compiling a module's Lean source files.Unlike moreLeanArgs, these arguments do not affect the trace\nof the build result, so they can be changed without triggering a rebuild.\nThey come before moreLeanArgs.Additional arguments to pass to leanc\nwhen compiling a module's C source files generated by lean.Lake already passes some flags based on the buildType,\nbut you can change this by, for example, adding -O0 and -UNDEBUG.Additional options to pass to the Lean language server\n(i.e., lean --server) launched by lake serve.Additional arguments to pass to leanc\nwhen compiling a module's C source files generated by lean.Unlike moreLeancArgs, these arguments do not affect the trace\nof the build result, so they can be changed without triggering a rebuild.\nThey come before moreLeancArgs.Additional target objects to use when linking (both static and shared).\nThese will come after the paths of native facets.Additional target libraries to pass to leanc when linking\n(e.g., for shared libraries or binary executables).\nThese will come after the paths of other link objects.Additional arguments to pass to leanc when linking (e.g., for shared\nlibraries or binary executables). These will come after the paths of\nthe linked objects.Additional arguments to pass to leanc when linking (e.g., for shared\nlibraries or binary executables). These will come after the paths of\nthe linked objects.Unlike moreLinkArgs, these arguments do not affect the trace\nof the build result, so they can be changed without triggering a rebuild.\nThey come before moreLinkArgs.Asserts whether Lake should assume Lean modules are platform-independent.* If false, Lake will add System.Platform.target to the module traces\nwithin the code unit (e.g., package or library). This will force Lean code\nto be re-elaborated on different platforms.* If true, Lake will exclude platform-dependent elements\n(e.g., precompiled modules, external libraries) from a module's trace,\npreventing re-elaboration on different platforms. Note that this will not\neffect  modules outside the code unit in question. For example, a\nplatform-independent package which depends on a platform-dependent library\nwill still be platform-dependent.* If none, Lake will construct traces as natural. That is, it will include\nplatform-dependent artifacts in the trace if they module depends on them,\nbut otherwise not force modules to be platform-dependent.There is no check  for correctness here, so a configuration can lie\nand Lake will not catch it. Defaults to none.\n\nMinimal TOML Package ConfigurationThe minimal TOML configuration for a Lean package sets only the package's name, using the default values for all other fields.\nThis package contains no targets, so there is no code to be built.name = \"example-package\"\n\n\nLibrary TOML Package ConfigurationThe minimal TOML configuration for a Lean package sets the package's name and defines a library target.\nThis library is named Sorting, and its modules are expected under the Sorting.* hierarchy.name = \"example-package\"\ndefaultTargets = [\"Sorting\"]\n\n[[lean_lib]]\nname = \"Sorting\"\n\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake\u0009Configuration File Format\u0009Declarative TOML Format","header":"22.1.3.1.1. Package Configuration","id":"/Build-Tools-and-Distribution/Lake/#The-Lean-Language-Reference--Build-Tools-and-Distribution--Lake--Configuration-File-Format--Declarative-TOML-Format--Package-Configuration"},"/Build-Tools-and-Distribution/Lake/#lake-api":{"contents":"In addition to ordinary IO effects, Lake scripts have access to the Lake environment (which provides information about the current toolchain, such as the location of the Lean compiler) and the current workspace.\nThis access is provided in ScriptM.\n\nThe type of a Script's monad.It is an IO monad equipped information about the Lake configuration.\n\n\n\n\n\n","context":"Lean Reference\u0009Build Tools\u0009Lake","header":"22.1.4. Script API Reference","id":"/Build-Tools-and-Distribution/Lake/#lake-api"},"/The--grind--tactic/Algebraic-Solver-_LPAR_Commutative-Rings___-Fields_RPAR_/#AddRightCancel":{"contents":"The ring solver automatically embeds CommSemirings into a CommRing envelope (using the construction Lean.Grind.Ring.OfSemiring.Q).\nHowever, the embedding is injective only when the CommSemiring implements the type class AddRightCancel.\nNat is an example of  a commutative semiring that implements AddRightCancel.\n\nexample (x y : Nat) :\n    x ^ 2 * y = 1 →\n    x * y ^ 2 = y →\n    y * x = 1 := by\n  grind\n\n\nA type where addition is right-cancellative, i.e. a + c = b + c implies a = b.Addition is right-cancellative.\n\n","context":"Lean Reference\u0009The  grind  tactic\u0009Algebraic Solver (Commutative Rings, Fields)\u0009Solver Type Classes\u0009Natural Number Zero Divisors","header":"17.8.1.3.1. Right-Cancellative Addition","id":"/The--grind--tactic/Algebraic-Solver-_LPAR_Commutative-Rings___-Fields_RPAR_/#AddRightCancel"}});