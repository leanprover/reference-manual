window.docContents[76].resolve({"/Basic-Types/Optional-Values/#The-Lean-Language-Reference--Basic-Types--Optional-Values--Coercions":{"contents":"\n\nThere is a coercion from α to Option α that wraps a value in some.\nThis allows Option to be used in a style similar to nullable types in other languages, where values that are missing are indicated by none and values that are present are not specially marked.\n\nCoercions and OptionIn getAlpha, a line of input is read.\nIf the line consists only of letters (after removing whitespace from the beginning and end of it), then it is returned; otherwise, the function returns none.def getAlpha : IO (Option String) := do\n  let line := (← (← IO.getStdin).getLine).trim\n  if line.length > 0 && line.all Char.isAlpha then\n    return line\n  else\n    return none\nIn the successful case, there is no explicit some wrapped around line.\nThe some is automatically inserted by the coercion.\n\n\n\n","context":"Lean Reference\u0009Basic Types\u0009Optional Values","header":"19.12.1. Coercions","id":"/Basic-Types/Optional-Values/#The-Lean-Language-Reference--Basic-Types--Optional-Values--Coercions"},"/releases/v4.11.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___11___0-_LPAR_2024-09-02_RPAR_--Breaking-changes":{"contents":"* For @[ext]-generated ext and ext_iff lemmas, the x and y term arguments are now implicit. Furthermore these two lemmas are now protected (#4543).* Now trace.profiler.useHearbeats is trace.profiler.useHeartbeats (#4590).* A bugfix in the structural recursion code may in some cases break existing code, when a parameter of the type of the recursive argument is bound behind indices of that type. This can usually be fixed by reordering the parameters of the function (#4672).* Now List.filterMapM sequences monadic actions left-to-right (#4820).* The effect of the variable command on proofs of theorems has been changed. Whether such section variables are accessible in the proof now depends only on the theorem signature and other top-level commands, not on the proof itself. This change ensures that* the statement of a theorem is independent of its proof. In other words, changes in the proof cannot change the theorem statement.* tactics such as induction cannot accidentally include a section variable.* the proof can be elaborated in parallel to subsequent declarations in a future version of Lean.The effect of variables on the theorem header as well as on other kinds of declarations is unchanged.Specifically, section variables are included if they* are directly referenced by the theorem header,* are included via the new include command in the current section and not subsequently mentioned in an omit statement,* are directly referenced by any variable included by these rules, OR* are instance-implicit variables that reference only variables included by these rules.For porting, a new option deprecated.oldSectionVars is included to locally switch back to the old behavior.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.11.0 (2024-09-02)","header":"Breaking changes","id":"/releases/v4.11.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___11___0-_LPAR_2024-09-02_RPAR_--Breaking-changes"},"/releases/v4.14.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___14___0-_LPAR_2024-12-02_RPAR_--Breaking-changes":{"contents":"* The syntax for providing arguments to deriving handlers has been removed, which was not used by any major Lean projects in the ecosystem. As a result, the  applyDerivingHandlers now takes one fewer argument, registerDerivingHandlerWithArgs is now simply registerDerivingHandler, DerivingHandler no longer includes the unused parameter, and DerivingHandlerNoArgs has been deprecated. To migrate code, delete the unused none argument and use registerDerivingHandler and DerivingHandler. (#5265)* The minimum supported Windows version has been raised to Windows 10 1903, released May 2019. (#5753)* The --lean CLI option for lake was removed. Use the LEAN environment variable instead. (#5684)* The inductive ... :=, structure ... :=, and class ... := syntaxes have been deprecated in favor of the ... where variants. The old syntax produces a warning, controlled by the linter.deprecated option. (#5542)* The generated tactic configuration elaborators now land in TacticM to make use of the current recovery state. Commands that wish to elaborate configurations should now use declare_command_config_elab instead of declare_config_elab to get an elaborator landing in CommandElabM. Syntaxes should migrate to optConfig instead of (config)?, but the elaborators are reverse compatible. (#5883)\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.14.0 (2024-12-02)","header":"Breaking changes","id":"/releases/v4.14.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___14___0-_LPAR_2024-12-02_RPAR_--Breaking-changes"},"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Language":{"contents":"* #3696 makes all message constructors handle pretty printer errors.* #4460 runs all linters for a single command (together) on a separate\nthread from further elaboration, making a first step towards\nparallelizing the elaborator.* #5757, see the highlights section above for details.* #6123 ensures that the configuration in Simp.Config is used when\nreducing terms and checking definitional equality in simp.* #6204, see the highlights section above for details.* #6270 fixes a bug that could cause the injectivity tactic to fail in\nreducible mode, which could cause unfolding lemma generation to fail\n(used by tactics such as unfold). In particular,\nLean.Meta.isConstructorApp'? was not aware that n + 1 is equivalent\nto Nat.succ n.* #6273 modifies the \"foo has been deprecated: use betterFoo instead\"\nwarning so that foo and betterFoo are hoverable.* #6278 enables simp configuration options to be passed to norm_cast.* #6286 ensure bv_decide uses definitional equality in its reflection\nprocedure as much as possible. Previously it would build up explicit\ncongruence proofs for the kernel to check. This reduces the size of\nproof terms passed to kernel speeds up checking of large reflection\nproofs.* #6288 uses Lean.RArray in bv_decide's reflection proofs. Giving\nspeedups on problems with lots of variables.* #6295 sets up simprocs for all the remaining operations defined in\nInit.Data.Fin.Basic* #6300, see the highlights section above for details.* #6330, see the highlights section above for details.* #6362, see the highlights section above for details.* #6366, see the highlights section above for details.* #6375 fixes a bug in the simplifier. It was producing terms with loose\nbound variables when eliminating unused let_fun expressions.* #6378 adds an explanation to the error message when cases and\ninduction are applied to a term whose type is not an inductive type.\nFor Prop, these tactics now suggest the by_cases tactic. Example:\n\ntactic 'cases' failed, major premise type is not an inductive type\n  Prop\n\n\n* #6381 fixes a bug in withTrackingZetaDelta and\nwithTrackingZetaDeltaSet. The MetaM caches need to be reset. See new\ntest.* #6385 fixes a bug in simp_all? that caused some local declarations\nto be omitted from the Try this: suggestions.* #6386 ensures that revertAll clears auxiliary declarations when\ninvoked directly by users.* #6387 fixes a type error in the proof generated by the contradiction\ntactic.* #6397 ensures that simp and dsimp do not unfold definitions that\nare not intended to be unfolded by the user. See issue #5755 for an\nexample affected by this issue.* #6398 ensures Meta.check check projections.* #6412 adds reserved names for congruence theorems used in the\nsimplifier and grind tactics. The idea is prevent the same congruence\ntheorems to be generated over and over again.* #6413 introduces the following features to the WIP grind tactic:\n\n* Expr internalization.* Congruence theorem cache.* Procedure for adding new facts* New tracing options* New preprocessing steps: fold projections and eliminate dangling\nExpr.mdata\n\n* #6414 fixes a bug in Lean.Meta.Closure that would introduce\nunder-applied delayed assignment metavariables, which would keep them\nfrom ever getting instantiated. This bug affected match elaboration\nwhen the expected type contained postponed elaboration problems, for\nexample tactic blocks.* #6419 fixes multiple bugs in the WIP grind tactic. It also adds\nsupport for printing the grind internal state.* #6428 adds a new preprocessing step to the grind tactic:\nuniverse-level normalization. The goal is to avoid missing equalities in\nthe congruence closure module.* #6430 adds the predicate Expr.fvarsSet a b, which returns true if\nand only if the free variables in a are a subset of the free variables\nin b.* #6433 adds a custom type and instance canonicalizer for the (WIP)\ngrind tactic. The grind tactic uses congruence closure but\ndisregards types, type formers, instances, and proofs. Proofs are\nignored due to proof irrelevance. Types, type formers, and instances are\nconsidered supporting elements and are not factored into congruence\ndetection. Instead, grind only checks whether elements are\nstructurally equal, which, in the context of the grind tactic, is\nequivalent to pointer equality. See new tests for examples where the\ncanonicalizer is important.* #6435 implements the congruence table for the (WIP) grind tactic. It\nalso fixes several bugs, and adds a new preprocessing step.* #6437 adds support for detecting congruent terms in the (WIP) grind\ntactic. It also introduces the grind.debug option, which, when set to\ntrue, checks many invariants after each equivalence class is merged.\nThis option is intended solely for debugging purposes.* #6438 ensures norm_cast doesn't fail to act in the presence of\nno_index annotations* #6441 adds basic truth value propagation rules to the (WIP) grind\ntactic.* #6442 fixes the checkParents sanity check in grind.* #6443 adds support for propagating the truth value of equalities in\nthe (WIP) grind tactic.* #6447 refactors grind and adds support for invoking the simplifier\nusing the GrindM monad.* #6448 declares the command builtin_grind_propagator for registering\nequation propagator for grind. It also declares the auxiliary the\nattribute.* #6449 completes the implementation of the command\nbuiltin_grind_propagator.* #6452 adds support for generating (small) proofs for any two\nexpressions that belong to the same equivalence class in the grind\ntactic state.* #6453 improves bv_decide's performance in the presence of large\nliterals.* #6455 fixes a bug in the equality proof generator in the (WIP) grind\ntactic.* #6456 fixes another bug in the equality proof generator in the (WIP)\ngrind tactic.* #6457 adds support for generating congruence proofs for congruences\ndetected by the grind tactic.* #6458 adds support for compact congruence proofs in the (WIP) grind\ntactic. The mkCongrProof function now verifies whether the congruence\nproof can be constructed using only congr, congrFun, and congrArg,\navoiding the need to generate the more complex hcongr auxiliary\ntheorems.* #6459 adds the (WIP) grind tactic. It currently generates a warning\nmessage to make it clear that the tactic is not ready for production.* #6461 adds a new propagation rule for negation to the (WIP) grind\ntactic.* #6463 adds support for constructors to the (WIP) grind tactic. When\nmerging equivalence classes, grind checks for equalities between\nconstructors. If they are distinct, it closes the goal; if they are the\nsame, it applies injectivity.* #6464 completes support for literal values in the (WIP) grind\ntactic. grind now closes the goal whenever it merges two equivalence\nclasses with distinct literal values.* #6465 adds support for projection functions to the (WIP) grind\ntactic.* #6466 completes the implementation of addCongrTable in the (WIP)\ngrind tactic. It also adds a new test to demonstrate why the extra\ncheck is needed. It also updates the field cgRoot (congruence root).* #6468 fixes issue #6467* #6469 adds support code for implementing e-match in the (WIP) grind\ntactic.* #6470 introduces a command for specifying patterns used in the\nheuristic instantiation of global theorems in the grind tactic. Note\nthat this PR only adds the parser.* #6472 implements the command grind_pattern. The new command allows\nusers to associate patterns with theorems. These patterns are used for\nperforming heuristic instantiation with e-matching. In the future, we\nwill add the attributes @[grind_eq], @[grind_fwd], and\n@[grind_bwd] to compute the patterns automatically for theorems.* #6473 adds a deriving handler for the ToExpr class. It can handle\nmutual and nested inductive types, however it falls back to creating\npartial instances in such cases. This is upstreamed from the Mathlib\nderiving handler written by @kmill, but has fixes to handle autoimplicit\nuniverse level variables.* #6474 adds pattern validation to the grind_pattern command. The new\ncheckCoverage function will also be used to implement the attributes\n@[grind_eq], @[grind_fwd], and @[grind_bwd].* #6475 adds support for activating relevant theorems for the (WIP)\ngrind tactic. We say a theorem is relevant to a grind goal if the\nsymbols occurring in its patterns also occur in the goal.* #6478 internalize nested ground patterns when activating ematch\ntheorems in the (WIP) grind tactic.* #6481 implements E-matching for the (WIP) grind tactic. We still\nneed to finalize and internalize the new instances.* #6484 addresses a few error messages where diffs weren't being\nexposed.* #6485 implements Grind.EMatch.instantiateTheorem in the (WIP)\ngrind tactic.* #6487 adds source position information for structure parent\nprojections, supporting \"go to definition\". Closes #3063.* #6488 fixes and refactors the E-matching module for the (WIP) grind\ntactic.* #6490 adds basic configuration options for the grind tactic.* #6492 fixes a bug in the theorem instantiation procedure in the (WIP)\ngrind tactic.* #6497 fixes another theorem instantiation bug in the grind tactic.\nIt also moves new instances to be processed to Goal.* #6498 adds support in the grind tactic for propagating dependent\nforall terms forall (h : p), q[h] where p is a proposition.* #6499 fixes the proof canonicalizer for grind.* #6500 fixes a bug in the markNestedProofs used in grind. See new\ntest.* #6502 fixes a bug in the proof assembly procedure utilized by the\ngrind tactic.* #6503 adds a simple strategy to the (WIP) grind tactic. It just\nkeeps internalizing new theorem instances found by E-matching.* #6506 adds the monotonicity tactic, intended to be used inside the\npartial_fixpoint feature.* #6508 fixes a bug in the sanity checkers for the grind tactic. See\nthe new test for an example of a case where it was panicking.* #6509 fixes a bug in the congruence closure data structure used in the\ngrind tactic. The new test includes an example that previously caused\na panic. A similar panic was also occurring in the test\ngrind_nested_proofs.lean.* #6510 adds a custom congruence rule for equality in grind. The new\nrule takes into account that Eq is a symmetric relation. In the\nfuture, we will add support for arbitrary symmetric relations. The\ncurrent rule is important for propagating disequalities effectively in\ngrind.* #6512 introduces support for user-defined fallback code in the grind\ntactic. The fallback code can be utilized to inspect the state of\nfailing grind subgoals and/or invoke user-defined automation. Users\ncan now write grind on_failure <code>, where <code> should have the\ntype GoalM Unit. See the modified tests in this PR for examples.* #6513 adds support for (dependent) if-then-else terms (i.e., ite and\ndite applications) in the grind tactic.* #6514 enhances the assertion of new facts in grind by avoiding the\ncreation of unnecessary metavariables.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.16.0 (2025-02-03)","header":"Language","id":"/releases/v4.16.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___16___0-_LPAR_2025-02-03_RPAR_--Language"},"/releases/v4.8.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___8___0-_LPAR_2024-06-05_RPAR_--Lake":{"contents":"* TOML Lake configurations. #3298, #4104.Lake packages can now use TOML as a alternative configuration file format instead of Lean. If the default lakefile.lean is missing, Lake will also look for a lakefile.toml. The TOML version of the configuration supports a restricted set of the Lake configuration options, only including those which can easily mapped to a TOML data structure. The TOML syntax itself fully compiles with the TOML v1.0.0 specification.As part of the introduction of this new feature, we have been helping maintainers of some major packages within the ecosystem switch to this format. For example, the following is Aesop's new lakefile.toml:leanprover-community/aesop/lakefile.tomlname = \"aesop\"\ndefaultTargets = [\"Aesop\"]\ntestRunner = \"test\"\nprecompileModules = false\n\n[[require]]\nname = \"batteries\"\ngit = \"https://github.com/leanprover-community/batteries\"\nrev = \"main\"\n\n[[lean_lib]]\nname = \"Aesop\"\n\n[[lean_lib]]\nname = \"AesopTest\"\nglobs = [\"AesopTest.+\"]\nleanOptions = {linter.unusedVariables = false}\n\n[[lean_exe]]\nname = \"test\"\nsrcDir = \"scripts\"\nTo assist users who wish to transition their packages between configuration file formats, there is also a new lake translate-config command for migrating to/from TOML.Running lake translate-config toml will produce a lakefile.toml version of a package's lakefile.lean. Any configuration options unsupported by the TOML format will be discarded during translation, but the original lakefile.lean will remain so that you can verify the translation looks good before deleting it.* Build progress overhaul. #3835, #4115, #4127, #4220, #4232, #4236.Builds are now managed by a top-level Lake build monitor, this makes the output of Lake builds more standardized and enables producing prettier and more configurable progress reports.As part of this change, job isolation has improved. Stray I/O and other build related errors in custom targets are now properly isolated and caught as part of their job. Import errors no longer cause Lake to abort the entire build and are instead localized to the build jobs of the modules in question.Lake also now uses ANSI escape sequences to add color and produce progress lines that update in-place; this can be toggled on and off using --ansi / --no-ansi.--wfail and --iofail options have been added that causes a build to fail if any of the jobs log a warning (--wfail) or produce any output or log information messages (--iofail). Unlike some other build systems, these options do NOT convert these logs into errors, and Lake does not abort jobs on such a log (i.e., dependent jobs will still continue unimpeded).* lake test. #3779.Lake now has a built-in test command which will run a script or executable labelled @[test_runner] (in Lean) or defined as the testRunner (in TOML) in the root package.Lake also provides a lake check-test command which will exit with code 0 if the package has a properly configured test runner or error with 1 otherwise.* lake lean. #3793.The new command lake lean <file> [-- <args...>] functions like lake env lean <file> <args...>, except that it builds the imports of file before running lean. This makes it very useful for running test or example code that imports modules that are not guaranteed to have been built beforehand.* Miscellaneous bug fixes and improvements* #3609 LEAN_GITHASH environment variable to override the detected Git hash for Lean when computing traces, useful for testing custom builds of Lean.* #3795 improves relative package directory path normalization in the pre-rename check.* #3957 fixes handling of packages that appear multiple times in a dependency tree.* #3999 makes it an error for there to be a mismatch between a package name and what it is required as. Also adds a special message for the std-to-batteries rename.* #4033 fixes quiet mode.* Docs: #3704.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.8.0 (2024-06-05)","header":"Lake","id":"/releases/v4.8.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___8___0-_LPAR_2024-06-05_RPAR_--Lake"},"/releases/v4.8.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___8___0-_LPAR_2024-06-05_RPAR_--Lean-internals":{"contents":"* Defeq and WHNF algorithms* #3616 gives better support for reducing Nat.rec expressions.* #3774 add tracing for \"non-easy\" WHNF cases.* #3807 fixes an isDefEq performance issue, now trying structure eta after lazy delta reduction.* #3816 fixes .yesWithDeltaI behavior to prevent increasing transparency level when reducing projections.* #3837 improves heuristic at isDefEq.* #3965 improves isDefEq for constraints of the form t.i =?= s.i.* #3977 improves isDefEqProj.* #3981 adds universe constraint approximations to be able to solve u =?= max u ?v using ?v = u.\nThese approximations are only applied when universe constraints cannot be postponed anymore.* #4004 improves isDefEqProj during typeclass resolution.* #4012 adds backward.isDefEq.lazyProjDelta and backward.isDefEq.lazyWhnfCore backwards compatibility flags.* Kernel* #3966 removes dead code.* #4035 fixes mismatch for TheoremVal between Lean and C++.* Discrimination trees* 423fed\nand 3218b2:\nsimplify handling of dependent/non-dependent pi types.* Typeclass instance synthesis* #3638 eta-reduces synthesized instances* ce350f fixes a linearity issue* 917a31\nimproves performance by considering at most one answer for subgoals not containing metavariables.\n#4008 adds backward.synthInstance.canonInstances backward compatibility flag.* Definition processing* #3661, #3767 changes automatically generated equational theorems to be named\nusing suffix .eq_<idx> instead of ._eq_<idx>, and .eq_def instead of ._unfold. (See breaking changes below.)\n#3675 adds a mechanism to reserve names.\n#3803 fixes reserved name resolution inside namespaces and fixes handling of matcher declarations and equation lemmas.* #3662 causes auxiliary definitions nested inside theorems to become defs if they are not proofs.* #4006 makes proposition fields of structures be theorems.* #4018 makes it an error for a theorem to be extern.* #4047 improves performance making equations for well-founded recursive definitions.* Refactors* #3614 avoids unfolding in Lean.Meta.evalNat.* #3621 centralizes functionality for Fix/GuessLex/FunInd in the ArgsPacker module.* #3186 rewrites the UnusedVariable linter to be more performant.* #3589 removes coercion from String to Name (see breaking changes below).* #3237 removes the lines field from FileMap.* #3951 makes msg parameter to throwTacticEx optional.* Diagnostics* #4016, #4019,\n#4020, #4030,\n#4031,\nc3714b,\n#4049 adds set_option diagnostics true for diagnostic counters.\nTracks number of unfolded declarations, instances, reducible declarations, used instances, recursor reductions,\nisDefEq heuristic applications, among others.\nThis option is suggested in exceptional situations, such as at deterministic timeout and maximum recursion depth.* 283587\nadds diagnostic information for simp.* #4043 adds diagnostic information for congruence theorems.* #4048 display diagnostic information\nfor set_option diagnostics true in <tactic> and set_option diagnostics true in <term>.* Other features* #3800 adds environment extension to record which definitions use structural or well-founded recursion.* #3801 trace.profiler can now export to Firefox Profiler.* #3918, #3953 adds @[builtin_doc] attribute to make docs and location of a declaration available as a builtin.* #3939 adds the lean --json CLI option to print messages as JSON.* #3075 improves test_extern command.* #3970 gives monadic generalization of FindExpr.* Docs: #3743, #3921,\n#3954.* Other fixes: #3622,\n#3726, #3823,\n#3897, #3964,\n#3946, #4007,\n#4026.\n\n","context":"Lean Reference\u0009Release Notes\u0009Lean 4.8.0 (2024-06-05)","header":"Lean internals","id":"/releases/v4.8.0/#The-Lean-Language-Reference--Release-Notes--Lean-4___8___0-_LPAR_2024-06-05_RPAR_--Lean-internals"}});