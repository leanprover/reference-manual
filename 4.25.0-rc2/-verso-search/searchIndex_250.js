window.docContents[250].resolve({"/Notations-and-Macros/Defining-New-Syntax/#source-info":{"contents":"Atoms, identifiers, and nodes optionally contain source information that tracks their correspondence with the original file.\nThe parser saves source information for all tokens, but not for nodes; position information for parsed nodes is reconstructed from their first and last tokens.\nNot all Syntax data results from the parser: it may be the result of macro expansion, in which case it typically contains a mix of generated and parsed syntax, or it may be the result of delaborating an internal term to display it to a user.\nIn these use cases, nodes may themselves contain source information.\n\nSource information comes in two varieties:\n\n Original\n\nOriginal source information comes from the parser.\n  In addition to the original source location, it also contains leading and trailing whitespace that was skipped by the parser, which allows the original string to be reconstructed.\n  This whitespace is saved as offsets into the string representation of the original source code (that is, as Substring) to avoid having to allocate copies of substrings.\n\n Synthetic\n\nSynthetic source information comes from metaprograms (including macros) or from Lean's internals.\n  Because there is no original string to be reconstructed, it does not save leading and trailing whitespace.\n  Synthetic source positions are used to provide accurate feedback even when terms have been automatically transformed, as well as to track the correspondence between elaborated expressions and their presentation in Lean's output.\n  A synthetic position may be marked canonical, in which case some operations that would ordinarily ignore synthetic positions will treat it as if it were not.\n\n\n\nSource information that relates syntax to the context that it came from.The primary purpose of SourceInfo is to relate the output of the parser and the macro expander to\nthe original source file. When produced by the parser, Syntax.node does not carry source info; the\nparser associates it only with atoms and identifiers. If a Syntax.node is introduced by a\nquotation, then it has synthetic source info that both associates it with an original reference\nposition and indicates that the original atoms in it may not originate from the Lean file under\nelaboration.Source info is also used to relate Lean's output to the internal data that it represents; this is\nthe basis for many interactive features. When used this way, it can occur on Syntax.node as well.A token produced by the parser from original input that includes both leading and trailing\nwhitespace as well as position information.The leading whitespace is inferred after parsing by Syntax.updateLeading. This is because the\n“preceding token” is not well-defined during parsing, especially in the presence of backtracking.Synthetic syntax is syntax that was produced by a metaprogram or by Lean itself (e.g. by a\nquotation). Synthetic syntax is annotated with a source span from the original syntax, which\nrelates it to the source file.The delaborator uses this constructor to store an encoded indicator of which core language\nexpression gave rise to the syntax.The canonical flag on synthetic syntax is enabled for syntax that is not literally part of the\noriginal input syntax but should be treated “as if” the user really wrote it for the purpose of\nhovers and error messages. This is usually used on identifiers in order to connect the binding\nsite to the user's original syntax even if the name of the identifier changes during expansion, as\nwell as on tokens that should receive targeted messages.Generally speaking, a macro expansion should only use a given piece of input syntax in a single\ncanonical token. An exception to this rule is when the same identifier is used to declare two\nbinders, as in the macro expansion for dependent if:`(if $h : $cond then $t else $e) ~>\n`(dite $cond (fun $h => $t) (fun $h => $t))\nIn these cases, if the user hovers over h they will see information about both binding sites.A synthesized token without position information.\n\n","context":"Lean Reference\u0009Notations and Macros\u0009Defining New Syntax","header":"20.4.5. Source Positions","id":"/Notations-and-Macros/Defining-New-Syntax/#source-info"}});