window.docContents[223].resolve({"/Basic-Types/Optional-Values/#The-Lean-Language-Reference--Basic-Types--Optional-Values--API-Reference--Properties-and-Comparisons":{"contents":"Returns true on none and false on some x.This function is more flexible than (· == none) because it does not require a BEq α instance.Examples:* (none : Option Nat).isNone = true* (some Nat.add).isNone = false\n\nReturns true on some x and false on none.\n\nChecks whether an optional value is both present and equal to some other value.Given x? : Option α and y : α, x?.isEqSome y is equivalent to x? == some y. It is more\nefficient because it avoids an allocation.\n\nOrdering of optional values typically uses the DecidableEq (Option α), LT (Option α), Min (Option α), and Max (Option α) instances.\n\nThe minimum of two optional values, with none treated as the least element. This function is\nusually accessed through the Min (Option α) instance, rather than directly.Prior to nightly-2025-02-27, none was treated as the greatest element, so\nmin none (some x) = min (some x) none = some x.Examples:* Option.min (some 2) (some 5) = some 2* Option.min (some 5) (some 2) = some 2* Option.min (some 2) none = none* Option.min none (some 5) = none* Option.min none none = none\n\nThe maximum of two optional values.This function is usually accessed through the Max (Option α) instance, rather than directly.Examples:* Option.max (some 2) (some 5) = some 5* Option.max (some 5) (some 2) = some 5* Option.max (some 2) none = some 2* Option.max none (some 5) = some 5* Option.max none none = none\n\nLifts an ordering relation to Option, such that none is the least element.It can be understood as adding a distinguished least element, represented by none, to both α and\nβ.This definition is part of the implementation of the LT (Option α) instance. However, because it\ncan be used with heterogeneous relations, it is sometimes useful on its own.Examples:* Option.lt (fun n k : Nat => n < k) none none = False* Option.lt (fun n k : Nat => n < k) none (some 3) = True* Option.lt (fun n k : Nat => n < k) (some 3) none = False* Option.lt (fun n k : Nat => n < k) (some 4) (some 5) = True* Option.lt (fun n k : Nat => n < k) (some 4) (some 4) = False\n\nEquality with none is decidable even if the wrapped type does not have decidable equality.This is not an instance because it is not definitionally equal to the standard instance of\nDecidableEq (Option α), which can cause problems. It can be locally bound if needed.Try to use the Boolean comparisons Option.isNone or Option.isSome instead.\n\n","context":"Lean Reference\u0009Basic Types\u0009Optional Values\u0009API Reference","header":"19.12.2.2. Properties and Comparisons","id":"/Basic-Types/Optional-Values/#The-Lean-Language-Reference--Basic-Types--Optional-Values--API-Reference--Properties-and-Comparisons"},"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--String-Slices--Positions--Other-Strings-or-Slices":{"contents":"Constructs a valid position on t from a valid position on s and a proof that s = t.\n\nGiven a string s, turns a valid position on the slice s.toSlice into a valid position on the\nstring s.\n\nGiven a valid position on a slice s, obtains the corresponding valid position on the\nunderlying string s.str.\n\nGiven a slice s and a position on s, obtain the corresponding position on s.copy.\n\nGiven a position in s.replaceStart p₀, obtain the corresponding position in s.\n\nGiven a position in s that is at least p₀, obtain the corresponding position in\ns.replaceStart p₀.\n\n","context":"Lean Reference\u0009Basic Types\u0009Strings\u0009API Reference\u0009String Slices\u0009Positions","header":"19.8.4.12.3.3. Other Strings or Slices","id":"/Basic-Types/Strings/#The-Lean-Language-Reference--Basic-Types--Strings--API-Reference--String-Slices--Positions--Other-Strings-or-Slices"}});